{"ast":null,"code":"import _toConsumableArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport specificationTableMock from \"./specificationTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockSpecifications(mock) {\n  mock.onPost(\"api/specifications\").reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        specification = _JSON$parse.specification;\n\n    var carId = specification.carId,\n        _specification$value = specification.value,\n        value = _specification$value === void 0 ? \"\" : _specification$value,\n        specId = specification.specId;\n    var id = generateSpecificationId();\n    var newSpecification = {\n      id: id,\n      carId: +carId,\n      value: value,\n      specId: +specId\n    };\n    specificationTableMock.push(newSpecification);\n    return [200, {\n      specification: newSpecification\n    }];\n  });\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(function (config) {\n    var urls = config.url.split(\"/\");\n    var id = urls[2];\n    var mockUtils = new MockUtils();\n\n    var _JSON$parse2 = JSON.parse(config.data),\n        queryParams = _JSON$parse2.queryParams;\n\n    var specifications = specificationTableMock.filter(function (el) {\n      return el.carId === +id;\n    });\n    var result = [];\n    specifications.forEach(function (el) {\n      return result.push(wrapSpecification(el));\n    });\n    var filterdSpecifications = mockUtils.baseFilter(result, queryParams);\n    return [200, filterdSpecifications];\n  });\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n        ids = _JSON$parse3.ids;\n\n    ids.forEach(function (id) {\n      var index = specificationTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n\n      if (index > -1) {\n        specificationTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    var spec = specificationTableMock.find(function (el) {\n      return el.id === +id;\n    });\n\n    if (!spec) {\n      return [400];\n    }\n\n    var specification = wrapSpecification(spec);\n    return [200, specification];\n  });\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n\n    var _JSON$parse4 = JSON.parse(config.data),\n        specification = _JSON$parse4.specification;\n\n    var index = specificationTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n\n    if (!index) {\n      return [400];\n    }\n\n    specificationTableMock[index] = _objectSpread({}, specification);\n    return [200];\n  });\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    var index = specificationTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    specificationTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateSpecificationId() {\n  var ids = specificationTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}\n\nfunction wrapSpecification(specification) {\n  var newSpec = _objectSpread({}, specification);\n\n  newSpec.name = getSpecNameById(newSpec.specId);\n  return newSpec;\n}\n\nfunction getSpecNameById(specId) {\n  var specs = [\"Seats\", \"Fuel Type\", \"Stock\", \"Door count\", \"Engine\", \"Transmission\", \"Drivetrain\", \"Combined MPG\", \"Warranty\", \"Wheels\"];\n  return specs[specId];\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/__mocks__/mockSpecification.js"],"names":["specificationTableMock","MockUtils","mockSpecifications","mock","onPost","reply","data","JSON","parse","specification","carId","value","specId","id","generateSpecificationId","newSpecification","push","config","urls","url","split","mockUtils","queryParams","specifications","filter","el","result","forEach","wrapSpecification","filterdSpecifications","baseFilter","ids","index","findIndex","splice","onGet","match","spec","find","onPut","onDelete","map","maxId","Math","max","newSpec","name","getSpecNameById","specs"],"mappings":"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","sourcesContent":["import specificationTableMock from \"./specificationTableMock\";\nimport MockUtils from \"./mock.utils\";\n\nexport default function mockSpecifications(mock) {\n  mock.onPost(\"api/specifications\").reply(({ data }) => {\n    const { specification } = JSON.parse(data);\n    const { carId, value = \"\", specId } = specification;\n    const id = generateSpecificationId();\n    const newSpecification = {\n      id,\n      carId: +carId,\n      value,\n      specId: +specId\n    };\n    specificationTableMock.push(newSpecification);\n    return [200, { specification: newSpecification }];\n  });\n\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(config => {\n    const urls = config.url.split(\"/\");\n    const id = urls[2];\n    const mockUtils = new MockUtils();\n    const { queryParams } = JSON.parse(config.data);\n    const specifications = specificationTableMock.filter(\n      el => el.carId === +id\n    );\n    const result = [];\n    specifications.forEach(el => result.push(wrapSpecification(el)));\n    const filterdSpecifications = mockUtils.baseFilter(result, queryParams);\n\n    return [200, filterdSpecifications];\n  });\n\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(config => {\n    const { ids } = JSON.parse(config.data);\n    ids.forEach(id => {\n      const index = specificationTableMock.findIndex(el => el.id === id);\n      if (index > -1) {\n        specificationTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    const spec = specificationTableMock.find(el => el.id === +id);\n    if (!spec) {\n      return [400];\n    }\n\n    const specification = wrapSpecification(spec);\n\n    return [200, specification];\n  });\n\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    const { specification } = JSON.parse(config.data);\n    const index = specificationTableMock.findIndex(el => el.id === +id);\n    if (!index) {\n      return [400];\n    }\n\n    specificationTableMock[index] = { ...specification };\n    return [200];\n  });\n\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    const index = specificationTableMock.findIndex(el => el.id === +id);\n    specificationTableMock.splice(index, 1);\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateSpecificationId() {\n  const ids = specificationTableMock.map(el => el.id);\n  const maxId = Math.max(...ids);\n  return maxId + 1;\n}\n\nfunction wrapSpecification(specification) {\n  const newSpec = { ...specification };\n  newSpec.name = getSpecNameById(newSpec.specId);\n  return newSpec;\n}\n\nfunction getSpecNameById(specId) {\n  const specs = [\n    \"Seats\",\n    \"Fuel Type\",\n    \"Stock\",\n    \"Door count\",\n    \"Engine\",\n    \"Transmission\",\n    \"Drivetrain\",\n    \"Combined MPG\",\n    \"Warranty\",\n    \"Wheels\"\n  ];\n  return specs[specId];\n}\n"]},"metadata":{},"sourceType":"module"}