{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_from_dom_1 = require(\"react-from-dom\");\n\nvar helpers_1 = require(\"./helpers\");\n\nexports.STATUS = {\n  FAILED: 'failed',\n  LOADED: 'loaded',\n  LOADING: 'loading',\n  PENDING: 'pending',\n  READY: 'ready',\n  UNSUPPORTED: 'unsupported'\n};\nvar cacheStore = Object.create(null);\n\nvar InlineSVG =\n/** @class */\nfunction (_super) {\n  __extends(InlineSVG, _super);\n\n  function InlineSVG(props) {\n    var _this = _super.call(this, props) || this; // tslint:disable-next-line:variable-name\n\n\n    _this._isMounted = false;\n\n    _this.handleLoad = function (content) {\n      /* istanbul ignore else */\n      if (_this._isMounted) {\n        _this.setState({\n          content: content,\n          status: exports.STATUS.LOADED\n        }, _this.getElement);\n      }\n    };\n\n    _this.handleError = function (error) {\n      var onError = _this.props.onError;\n      var status = error.message === 'Browser does not support SVG' ? exports.STATUS.UNSUPPORTED : exports.STATUS.FAILED;\n      /* istanbul ignore else */\n\n      if (process.env.NODE_ENV !== 'production') {\n        // tslint:disable-next-line:no-console\n        console.error(error);\n      }\n      /* istanbul ignore else */\n\n\n      if (_this._isMounted) {\n        _this.setState({\n          status: status\n        }, function () {\n          /* istanbul ignore else */\n          if (typeof onError === 'function') {\n            onError(error);\n          }\n        });\n      }\n    };\n\n    _this.request = function () {\n      var _a = _this.props,\n          cacheRequests = _a.cacheRequests,\n          src = _a.src;\n\n      try {\n        if (cacheRequests) {\n          cacheStore[src] = {\n            content: '',\n            status: exports.STATUS.LOADING,\n            queue: []\n          };\n        }\n\n        return fetch(src).then(function (response) {\n          var contentType = response.headers.get('content-type');\n\n          var _a = __read((contentType || '').split(/ ?; ?/), 1),\n              fileType = _a[0];\n\n          if (response.status > 299) {\n            throw new helpers_1.InlineSVGError('Not Found');\n          }\n\n          if (!['image/svg+xml', 'text/plain'].some(function (d) {\n            return fileType.indexOf(d) >= 0;\n          })) {\n            throw new helpers_1.InlineSVGError(\"Content type isn't valid: \" + fileType);\n          }\n\n          return response.text();\n        }).then(function (content) {\n          _this.handleLoad(content);\n          /* istanbul ignore else */\n\n\n          if (cacheRequests) {\n            var cache = cacheStore[src];\n            /* istanbul ignore else */\n\n            if (cache) {\n              cache.content = content;\n              cache.status = exports.STATUS.LOADED;\n              cache.queue = cache.queue.filter(function (cb) {\n                cb(content);\n                return false;\n              });\n            }\n          }\n        }).catch(function (error) {\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            delete cacheStore[src];\n          }\n\n          _this.handleError(error);\n        });\n      } catch (error) {\n        _this.handleError(new helpers_1.InlineSVGError(error.message));\n      }\n    };\n\n    _this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: exports.STATUS.PENDING\n    };\n    _this.hash = props.uniqueHash || helpers_1.randomString(8);\n    return _this;\n  }\n\n  InlineSVG.prototype.componentDidMount = function () {\n    this._isMounted = true;\n\n    if (!helpers_1.canUseDOM()) {\n      this.handleError(new helpers_1.InlineSVGError('No DOM'));\n      return;\n    }\n\n    var status = this.state.status;\n    var src = this.props.src;\n\n    try {\n      /* istanbul ignore else */\n      if (status === exports.STATUS.PENDING) {\n        /* istanbul ignore else */\n        if (!helpers_1.isSupportedEnvironment()) {\n          throw new helpers_1.InlineSVGError('Browser does not support SVG');\n        }\n        /* istanbul ignore else */\n\n\n        if (!src) {\n          throw new helpers_1.InlineSVGError('Missing src');\n        }\n\n        this.load();\n      }\n    } catch (error) {\n      this.handleError(error);\n    }\n  };\n\n  InlineSVG.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (!helpers_1.canUseDOM()) {\n      return;\n    }\n\n    var _a = this.state,\n        hasCache = _a.hasCache,\n        status = _a.status;\n    var _b = this.props,\n        onLoad = _b.onLoad,\n        src = _b.src;\n\n    if (prevState.status !== exports.STATUS.READY && status === exports.STATUS.READY) {\n      /* istanbul ignore else */\n      if (onLoad) {\n        onLoad(src, hasCache);\n      }\n    }\n\n    if (prevProps.src !== src) {\n      if (!src) {\n        this.handleError(new helpers_1.InlineSVGError('Missing src'));\n        return;\n      }\n\n      this.load();\n    }\n  };\n\n  InlineSVG.prototype.componentWillUnmount = function () {\n    this._isMounted = false;\n  };\n\n  InlineSVG.prototype.processSVG = function () {\n    var content = this.state.content;\n    var preProcessor = this.props.preProcessor;\n\n    if (preProcessor) {\n      return preProcessor(content);\n    }\n\n    return content;\n  };\n\n  InlineSVG.prototype.updateSVGAttributes = function (node) {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.baseURL,\n        baseURL = _b === void 0 ? '' : _b,\n        uniquifyIDs = _a.uniquifyIDs;\n    var replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n    var linkAttributes = ['href', 'xlink:href'];\n\n    var isDataValue = function isDataValue(name, value) {\n      return linkAttributes.indexOf(name) >= 0 && (value ? value.indexOf('#') < 0 : false);\n    };\n\n    if (!uniquifyIDs) {\n      return node;\n    }\n\n    __spread(node.children).map(function (d) {\n      if (d.attributes && d.attributes.length) {\n        var attributes_1 = Object.values(d.attributes);\n        attributes_1.forEach(function (a) {\n          var match = a.value.match(/url\\((.*?)\\)/);\n\n          if (match && match[1]) {\n            a.value = a.value.replace(match[0], \"url(\" + baseURL + match[1] + \"__\" + _this.hash + \")\");\n          }\n        });\n        replaceableAttributes.forEach(function (r) {\n          var attribute = attributes_1.find(function (a) {\n            return a.name === r;\n          });\n\n          if (attribute && !isDataValue(r, attribute.value)) {\n            attribute.value = attribute.value + \"__\" + _this.hash;\n          }\n        });\n      }\n\n      if (d.children.length) {\n        d = _this.updateSVGAttributes(d);\n      }\n\n      return d;\n    });\n\n    return node;\n  };\n\n  InlineSVG.prototype.getNode = function () {\n    var _a = this.props,\n        description = _a.description,\n        title = _a.title;\n\n    try {\n      var svgText = this.processSVG();\n      var node = react_from_dom_1.default(svgText, {\n        nodeOnly: true\n      });\n\n      if (!node || !(node instanceof SVGSVGElement)) {\n        throw new helpers_1.InlineSVGError('Could not convert the src to a DOM Node');\n      }\n\n      var svg = this.updateSVGAttributes(node);\n\n      if (description) {\n        var originalDesc = svg.querySelector('desc');\n\n        if (originalDesc && originalDesc.parentNode) {\n          originalDesc.parentNode.removeChild(originalDesc);\n        }\n\n        var descElement = document.createElement('desc');\n        descElement.innerHTML = description;\n        svg.prepend(descElement);\n      }\n\n      if (title) {\n        var originalTitle = svg.querySelector('title');\n\n        if (originalTitle && originalTitle.parentNode) {\n          originalTitle.parentNode.removeChild(originalTitle);\n        }\n\n        var titleElement = document.createElement('title');\n        titleElement.innerHTML = title;\n        svg.prepend(titleElement);\n      }\n\n      return svg;\n    } catch (error) {\n      this.handleError(error);\n    }\n  };\n\n  InlineSVG.prototype.getElement = function () {\n    try {\n      var node = this.getNode();\n      var element = react_from_dom_1.default(node);\n\n      if (!element || !React.isValidElement(element)) {\n        throw new helpers_1.InlineSVGError('Could not convert the src to a React element');\n      }\n\n      this.setState({\n        element: element,\n        status: exports.STATUS.READY\n      });\n    } catch (error) {\n      this.handleError(new helpers_1.InlineSVGError(error.message));\n    }\n  };\n\n  InlineSVG.prototype.load = function () {\n    var _this = this;\n    /* istanbul ignore else */\n\n\n    if (this._isMounted) {\n      this.setState({\n        content: '',\n        element: null,\n        status: exports.STATUS.LOADING\n      }, function () {\n        var _a = _this.props,\n            cacheRequests = _a.cacheRequests,\n            src = _a.src;\n        var cache = cacheRequests && cacheStore[src];\n\n        if (cache) {\n          /* istanbul ignore else */\n          if (cache.status === exports.STATUS.LOADING) {\n            cache.queue.push(_this.handleLoad);\n          } else if (cache.status === exports.STATUS.LOADED) {\n            _this.handleLoad(cache.content);\n          }\n\n          return;\n        }\n\n        var dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n        var inlineSrc;\n\n        if (dataURI) {\n          inlineSrc = dataURI[1] ? atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n        } else if (src.indexOf('<svg') >= 0) {\n          inlineSrc = src;\n        }\n\n        if (inlineSrc) {\n          _this.handleLoad(inlineSrc);\n\n          return;\n        }\n\n        _this.request();\n      });\n    }\n  };\n\n  InlineSVG.prototype.render = function () {\n    if (!helpers_1.canUseDOM()) {\n      return null;\n    }\n\n    var _a = this.state,\n        element = _a.element,\n        status = _a.status;\n\n    var _b = this.props,\n        baseURL = _b.baseURL,\n        cacheRequests = _b.cacheRequests,\n        _c = _b.children,\n        children = _c === void 0 ? null : _c,\n        description = _b.description,\n        innerRef = _b.innerRef,\n        _d = _b.loader,\n        loader = _d === void 0 ? null : _d,\n        onError = _b.onError,\n        onLoad = _b.onLoad,\n        preProcessor = _b.preProcessor,\n        src = _b.src,\n        title = _b.title,\n        uniqueHash = _b.uniqueHash,\n        uniquifyIDs = _b.uniquifyIDs,\n        rest = __rest(_b, [\"baseURL\", \"cacheRequests\", \"children\", \"description\", \"innerRef\", \"loader\", \"onError\", \"onLoad\", \"preProcessor\", \"src\", \"title\", \"uniqueHash\", \"uniquifyIDs\"]);\n\n    if (element) {\n      return React.cloneElement(element, __assign({\n        ref: innerRef\n      }, rest));\n    }\n\n    if ([exports.STATUS.UNSUPPORTED, exports.STATUS.FAILED].indexOf(status) > -1) {\n      return children;\n    }\n\n    return loader;\n  };\n\n  InlineSVG.defaultProps = {\n    cacheRequests: true,\n    uniquifyIDs: false\n  };\n  return InlineSVG;\n}(React.PureComponent);\n\nexports.default = InlineSVG;","map":null,"metadata":{},"sourceType":"script"}