{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/Auth/_redux/AuthInit.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { shallowEqual, useSelector, connect, useDispatch } from \"react-redux\";\nimport { LayoutSplashScreen } from \"../../../../_metronic/layout\";\nimport * as auth from \"./authRedux\";\nimport { getUserByToken } from \"./authCrud\";\n\nfunction AuthInit(props) {\n  var didRequest = useRef(false);\n  var dispatch = useDispatch();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      showSplashScreen = _useState2[0],\n      setShowSplashScreen = _useState2[1];\n\n  var _useSelector = useSelector(function (_ref) {\n    var auth = _ref.auth;\n    return {\n      authToken: auth.authToken\n    };\n  }, shallowEqual),\n      authToken = _useSelector.authToken; // We should request user by authToken before rendering the application\n\n\n  useEffect(function () {\n    var requestUser = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$getUserByToken, user;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                if (didRequest.current) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return getUserByToken();\n\n              case 4:\n                _yield$getUserByToken = _context.sent;\n                user = _yield$getUserByToken.data;\n                dispatch(props.fulfillUser(user));\n\n              case 7:\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n\n                if (!didRequest.current) {\n                  dispatch(props.logout());\n                }\n\n              case 13:\n                _context.prev = 13;\n                setShowSplashScreen(false);\n                return _context.finish(13);\n\n              case 16:\n                return _context.abrupt(\"return\", function () {\n                  return didRequest.current = true;\n                });\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9, 13, 16]]);\n      }));\n\n      return function requestUser() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (authToken) {\n      requestUser();\n    } else {\n      dispatch(props.fulfillUser(undefined));\n      setShowSplashScreen(false);\n    } // eslint-disable-next-line\n\n  }, []);\n  return showSplashScreen ? /*#__PURE__*/React.createElement(LayoutSplashScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, props.children);\n}\n\nexport default connect(null, auth.actions)(AuthInit);","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/Auth/_redux/AuthInit.js"],"names":["React","useRef","useEffect","useState","shallowEqual","useSelector","connect","useDispatch","LayoutSplashScreen","auth","getUserByToken","AuthInit","props","didRequest","dispatch","showSplashScreen","setShowSplashScreen","authToken","requestUser","current","user","data","fulfillUser","console","error","logout","undefined","children","actions"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,OAApC,EAA6CC,WAA7C,QAAgE,aAAhE;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAMC,UAAU,GAAGZ,MAAM,CAAC,KAAD,CAAzB;AACA,MAAMa,QAAQ,GAAGP,WAAW,EAA5B;;AACA,kBAAgDJ,QAAQ,CAAC,IAAD,CAAxD;AAAA;AAAA,MAAOY,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,qBAAsBX,WAAW,CAC/B;AAAA,QAAGI,IAAH,QAAGA,IAAH;AAAA,WAAe;AACbQ,MAAAA,SAAS,EAAER,IAAI,CAACQ;AADH,KAAf;AAAA,GAD+B,EAI/Bb,YAJ+B,CAAjC;AAAA,MAAQa,SAAR,gBAAQA,SAAR,CAJuB,CAWvB;;;AACAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,WAAW;AAAA,2EAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oBAEXL,UAAU,CAACM,OAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGeT,cAAc,EAH7B;;AAAA;AAAA;AAGAU,gBAAAA,IAHA,yBAGNC,IAHM;AAIdP,gBAAAA,QAAQ,CAACF,KAAK,CAACU,WAAN,CAAkBF,IAAlB,CAAD,CAAR;;AAJc;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOhBG,gBAAAA,OAAO,CAACC,KAAR;;AACA,oBAAI,CAACX,UAAU,CAACM,OAAhB,EAAyB;AACvBL,kBAAAA,QAAQ,CAACF,KAAK,CAACa,MAAN,EAAD,CAAR;AACD;;AAVe;AAAA;AAYhBT,gBAAAA,mBAAmB,CAAC,KAAD,CAAnB;AAZgB;;AAAA;AAAA,iDAeX;AAAA,yBAAOH,UAAU,CAACM,OAAX,GAAqB,IAA5B;AAAA,iBAfW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAXD,WAAW;AAAA;AAAA;AAAA,OAAjB;;AAkBA,QAAID,SAAJ,EAAe;AACbC,MAAAA,WAAW;AACZ,KAFD,MAEO;AACLJ,MAAAA,QAAQ,CAACF,KAAK,CAACU,WAAN,CAAkBI,SAAlB,CAAD,CAAR;AACAV,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,KAxBa,CAyBd;;AACD,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,SAAOD,gBAAgB,gBAAG,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAA4B,0CAAGH,KAAK,CAACe,QAAT,CAAnD;AACD;;AAED,eAAerB,OAAO,CAAC,IAAD,EAAOG,IAAI,CAACmB,OAAZ,CAAP,CAA4BjB,QAA5B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { shallowEqual, useSelector, connect, useDispatch } from \"react-redux\";\nimport { LayoutSplashScreen } from \"../../../../_metronic/layout\";\nimport * as auth from \"./authRedux\";\nimport { getUserByToken } from \"./authCrud\";\n\nfunction AuthInit(props) {\n  const didRequest = useRef(false);\n  const dispatch = useDispatch();\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\n  const { authToken } = useSelector(\n    ({ auth }) => ({\n      authToken: auth.authToken,\n    }),\n    shallowEqual\n  );\n\n  // We should request user by authToken before rendering the application\n  useEffect(() => {\n    const requestUser = async () => {\n      try {\n        if (!didRequest.current) {\n          const { data: user } = await getUserByToken();\n          dispatch(props.fulfillUser(user));\n        }\n      } catch (error) {\n        console.error(error);\n        if (!didRequest.current) {\n          dispatch(props.logout());\n        }\n      } finally {\n        setShowSplashScreen(false);\n      }\n\n      return () => (didRequest.current = true);\n    };\n\n    if (authToken) {\n      requestUser();\n    } else {\n      dispatch(props.fulfillUser(undefined));\n      setShowSplashScreen(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return showSplashScreen ? <LayoutSplashScreen /> : <>{props.children}</>;\n}\n\nexport default connect(null, auth.actions)(AuthInit);\n"]},"metadata":{},"sourceType":"module"}