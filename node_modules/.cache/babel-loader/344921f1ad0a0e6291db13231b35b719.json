{"ast":null,"code":"var cloneSvg = function cloneSvg(sourceSvg) {\n  return sourceSvg.cloneNode(true);\n};\n\nvar isLocal = function isLocal() {\n  return window.location.protocol === 'file:';\n};\n\nvar svgCache = new Map();\nvar requestQueue = {};\n\nvar queueRequest = function queueRequest(url, callback) {\n  requestQueue[url] = requestQueue[url] || [];\n  requestQueue[url].push(callback);\n};\n\nvar processRequestQueue = function processRequestQueue(url) {\n  var _loop_1 = function _loop_1(i, len) {\n    setTimeout(function () {\n      if (Array.isArray(requestQueue[url])) {\n        var cacheValue = svgCache.get(url);\n        var callback = requestQueue[url][i];\n\n        if (cacheValue instanceof SVGElement) {\n          callback(null, cloneSvg(cacheValue));\n        }\n\n        if (cacheValue instanceof Error) {\n          callback(cacheValue);\n        }\n\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url];\n        }\n      }\n    }, 0);\n  };\n\n  for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n    _loop_1(i);\n  }\n};\n\nvar loadSvg = function loadSvg(url, callback) {\n  if (svgCache.has(url)) {\n    var cacheValue = svgCache.get(url);\n\n    if (cacheValue instanceof SVGElement) {\n      callback(null, cloneSvg(cacheValue));\n      return;\n    }\n\n    if (cacheValue instanceof Error) {\n      callback(cacheValue);\n      return;\n    }\n\n    queueRequest(url, callback);\n    return;\n  }\n\n  svgCache.set(url, undefined);\n  queueRequest(url, callback);\n  var httpRequest = new XMLHttpRequest();\n\n  httpRequest.onreadystatechange = function () {\n    try {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(isLocal() ? 'Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.' : 'Unable to load SVG file: ' + url);\n        }\n\n        if (httpRequest.status === 200 || isLocal() && httpRequest.status === 0) {\n          if (httpRequest.responseXML instanceof Document) {\n            if (httpRequest.responseXML.documentElement) {\n              svgCache.set(url, httpRequest.responseXML.documentElement);\n            }\n          }\n\n          processRequestQueue(url);\n        } else {\n          throw new Error('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n        }\n      }\n    } catch (error) {\n      svgCache.set(url, error);\n      processRequestQueue(url);\n    }\n  };\n\n  httpRequest.open('GET', url);\n\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml');\n  }\n\n  httpRequest.send();\n};\n\nvar idCounter = 0;\n\nvar uniqueId = function uniqueId() {\n  return ++idCounter;\n};\n\nvar __spreadArrays = undefined && undefined.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar injectedElements = [];\nvar ranScripts = {};\nvar svgNamespace = 'http://www.w3.org/2000/svg';\nvar xlinkNamespace = 'http://www.w3.org/1999/xlink';\n\nvar injectElement = function injectElement(el, evalScripts, renumerateIRIElements, beforeEach, callback) {\n  var imgUrl = el.getAttribute('data-src') || el.getAttribute('src');\n\n  if (!imgUrl || !/\\.svg/i.test(imgUrl)) {\n    callback(new Error('Attempted to inject a file with a non-svg extension: ' + imgUrl));\n    return;\n  }\n\n  if (injectedElements.indexOf(el) !== -1) {\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    return;\n  }\n\n  injectedElements.push(el);\n  el.setAttribute('src', '');\n  loadSvg(imgUrl, function (error, svg) {\n    if (!svg) {\n      injectedElements.splice(injectedElements.indexOf(el), 1);\n      el = null;\n      callback(error);\n      return;\n    }\n\n    var imgId = el.getAttribute('id');\n\n    if (imgId) {\n      svg.setAttribute('id', imgId);\n    }\n\n    var imgTitle = el.getAttribute('title');\n\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle);\n    }\n\n    var imgWidth = el.getAttribute('width');\n\n    if (imgWidth) {\n      svg.setAttribute('width', imgWidth);\n    }\n\n    var imgHeight = el.getAttribute('height');\n\n    if (imgHeight) {\n      svg.setAttribute('height', imgHeight);\n    }\n\n    var mergedClasses = Array.from(new Set(__spreadArrays((svg.getAttribute('class') || '').split(' '), ['injected-svg'], (el.getAttribute('class') || '').split(' ')))).join(' ').trim();\n    svg.setAttribute('class', mergedClasses);\n    var imgStyle = el.getAttribute('style');\n\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle);\n    }\n\n    svg.setAttribute('data-src', imgUrl);\n    var imgData = [].filter.call(el.attributes, function (at) {\n      return /^data-\\w[\\w-]*$/.test(at.name);\n    });\n    Array.prototype.forEach.call(imgData, function (dataAttr) {\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value);\n      }\n    });\n\n    if (renumerateIRIElements) {\n      var iriElementsAndProperties_1 = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      };\n      var element_1;\n      var elements_1;\n      var properties_1;\n      var currentId_1;\n      var newId_1;\n      Object.keys(iriElementsAndProperties_1).forEach(function (key) {\n        element_1 = key;\n        properties_1 = iriElementsAndProperties_1[key];\n        elements_1 = svg.querySelectorAll(element_1 + '[id]');\n\n        var _loop_1 = function _loop_1(a, elementsLen) {\n          currentId_1 = elements_1[a].id;\n          newId_1 = currentId_1 + '-' + uniqueId();\n          var referencingElements;\n          Array.prototype.forEach.call(properties_1, function (property) {\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId_1 + '\"]');\n\n            for (var b = 0, referencingElementLen = referencingElements.length; b < referencingElementLen; b++) {\n              var attrValue = referencingElements[b].getAttribute(property);\n\n              if (attrValue && !attrValue.match(new RegExp('url\\\\(#' + currentId_1 + '\\\\)'))) {\n                continue;\n              }\n\n              referencingElements[b].setAttribute(property, 'url(#' + newId_1 + ')');\n            }\n          });\n          var allLinks = svg.querySelectorAll('[*|href]');\n          var links = [];\n\n          for (var c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            var href = allLinks[c].getAttributeNS(xlinkNamespace, 'href');\n\n            if (href && href.toString() === '#' + elements_1[a].id) {\n              links.push(allLinks[c]);\n            }\n          }\n\n          for (var d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId_1);\n          }\n\n          elements_1[a].id = newId_1;\n        };\n\n        for (var a = 0, elementsLen = elements_1.length; a < elementsLen; a++) {\n          _loop_1(a);\n        }\n      });\n    }\n\n    svg.removeAttribute('xmlns:a');\n    var scripts = svg.querySelectorAll('script');\n    var scriptsToEval = [];\n    var script;\n    var scriptType;\n\n    for (var i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type');\n\n      if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript' || scriptType === 'text/javascript') {\n        script = scripts[i].innerText || scripts[i].textContent;\n\n        if (script) {\n          scriptsToEval.push(script);\n        }\n\n        svg.removeChild(scripts[i]);\n      }\n    }\n\n    if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[imgUrl])) {\n      for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n        new Function(scriptsToEval[l])(window);\n      }\n\n      ranScripts[imgUrl] = true;\n    }\n\n    var styleTags = svg.querySelectorAll('style');\n    Array.prototype.forEach.call(styleTags, function (styleTag) {\n      styleTag.textContent += '';\n    });\n    svg.setAttribute('xmlns', svgNamespace);\n    svg.setAttribute('xmlns:xlink', xlinkNamespace);\n    beforeEach(svg);\n\n    if (el.parentNode) {\n      el.parentNode.replaceChild(svg, el);\n    }\n\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    callback(null, svg);\n  });\n};\n\nvar SVGInjector = function SVGInjector(elements, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.afterAll,\n      afterAll = _c === void 0 ? function () {\n    return undefined;\n  } : _c,\n      _d = _b.afterEach,\n      afterEach = _d === void 0 ? function () {\n    return undefined;\n  } : _d,\n      _e = _b.beforeEach,\n      beforeEach = _e === void 0 ? function () {\n    return undefined;\n  } : _e,\n      _f = _b.evalScripts,\n      evalScripts = _f === void 0 ? 'never' : _f,\n      _g = _b.renumerateIRIElements,\n      renumerateIRIElements = _g === void 0 ? true : _g;\n\n  if (elements && 'length' in elements) {\n    var elementsLoaded_1 = 0;\n\n    for (var i = 0, j = elements.length; i < j; i++) {\n      injectElement(elements[i], evalScripts, renumerateIRIElements, beforeEach, function (error, svg) {\n        afterEach(error, svg);\n\n        if (elements && 'length' in elements && elements.length === ++elementsLoaded_1) {\n          afterAll(elementsLoaded_1);\n        }\n      });\n    }\n  } else if (elements) {\n    injectElement(elements, evalScripts, renumerateIRIElements, beforeEach, function (error, svg) {\n      afterEach(error, svg);\n      afterAll(1);\n      elements = null;\n    });\n  } else {\n    afterAll(0);\n  }\n};\n\nexport { SVGInjector };","map":null,"metadata":{},"sourceType":"module"}