{"ast":null,"code":"/*  removeStorage: removes a key from localStorage and its sibling expiracy key\n    params:\n        key <string>     : localStorage key to remove\n    returns:\n        <boolean> : telling if operation succeeded\n */\nexport function removeStorage(key) {\n  try {\n    localStorage.setItem(key, \"\");\n    localStorage.setItem(key + \"_expiresIn\", \"\");\n  } catch (e) {\n    console.log(\"removeStorage: Error removing key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\n    params:\n        key <string> : localStorage key\n    returns:\n        <string> : value of localStorage key\n        null : in case of expired key or failure\n */\n\nexport function getStorage(key) {\n  var now = Date.now(); //epoch time, lets deal only with integer\n  // set expiration for storage\n\n  var expiresIn = localStorage.getItem(key + \"_expiresIn\");\n\n  if (expiresIn === undefined || expiresIn === null) {\n    expiresIn = 0;\n  }\n\n  expiresIn = Math.abs(expiresIn);\n\n  if (expiresIn < now) {\n    // Expired\n    removeStorage(key);\n    return null;\n  } else {\n    try {\n      var value = localStorage.getItem(key);\n      return value;\n    } catch (e) {\n      console.log(\"getStorage: Error reading key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n      return null;\n    }\n  }\n}\n/*  setStorage: writes a key into localStorage setting a expire time\n    params:\n        key <string>     : localStorage key\n        value <string>   : localStorage value\n        expires <number> : number of seconds from now to expire the key\n    returns:\n        <boolean> : telling if operation succeeded\n */\n\nexport function setStorage(key, value, expires) {\n  if (expires === undefined || expires === null) {\n    expires = 24 * 60 * 60; // default: seconds for 1 day\n  }\n\n  var now = Date.now(); //millisecs since epoch time, lets deal only with integer\n\n  var schedule = now + expires * 1000;\n\n  try {\n    localStorage.setItem(key, value);\n    localStorage.setItem(key + \"_expiresIn\", schedule);\n  } catch (e) {\n    console.log(\"setStorage: Error setting key [\" + key + \"] in localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/_metronic/_helpers/LocalStorageHelpers.js"],"names":["removeStorage","key","localStorage","setItem","e","console","log","JSON","stringify","getStorage","now","Date","expiresIn","getItem","undefined","Math","abs","value","setStorage","expires","schedule"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC/B,MAAI;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0B,EAA1B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAAG,GAAG,YAA3B,EAAyC,EAAzC;AACH,GAHD,CAGE,OAAOG,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CACI,wCACAL,GADA,GAEA,uBAFA,GAGAM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAJJ;AAMA,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,UAAT,CAAoBR,GAApB,EAAyB;AAC5B,MAAMS,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAD4B,CACJ;AACxB;;AACA,MAAIE,SAAS,GAAGV,YAAY,CAACW,OAAb,CAAqBZ,GAAG,GAAG,YAA3B,CAAhB;;AACA,MAAIW,SAAS,KAAKE,SAAd,IAA2BF,SAAS,KAAK,IAA7C,EAAmD;AAC/CA,IAAAA,SAAS,GAAG,CAAZ;AACH;;AAEDA,EAAAA,SAAS,GAAGG,IAAI,CAACC,GAAL,CAASJ,SAAT,CAAZ;;AACA,MAAIA,SAAS,GAAGF,GAAhB,EAAqB;AACjB;AACAV,IAAAA,aAAa,CAACC,GAAD,CAAb;AACA,WAAO,IAAP;AACH,GAJD,MAIO;AACH,QAAI;AACA,UAAMgB,KAAK,GAAGf,YAAY,CAACW,OAAb,CAAqBZ,GAArB,CAAd;AACA,aAAOgB,KAAP;AACH,KAHD,CAGE,OAAOb,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CACI,oCACAL,GADA,GAEA,uBAFA,GAGAM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAJJ;AAMA,aAAO,IAAP;AACH;AACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,UAAT,CAAoBjB,GAApB,EAAyBgB,KAAzB,EAAgCE,OAAhC,EAAyC;AAC5C,MAAIA,OAAO,KAAKL,SAAZ,IAAyBK,OAAO,KAAK,IAAzC,EAA+C;AAC3CA,IAAAA,OAAO,GAAG,KAAK,EAAL,GAAU,EAApB,CAD2C,CACnB;AAC3B;;AAED,MAAMT,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAL4C,CAKpB;;AACxB,MAAMU,QAAQ,GAAGV,GAAG,GAAGS,OAAO,GAAG,IAAjC;;AACA,MAAI;AACAjB,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0BgB,KAA1B;AACAf,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAAG,GAAG,YAA3B,EAAyCmB,QAAzC;AACH,GAHD,CAGE,OAAOhB,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CACI,oCACAL,GADA,GAEA,qBAFA,GAGAM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAJJ;AAMA,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH","sourcesContent":["\n/*  removeStorage: removes a key from localStorage and its sibling expiracy key\n    params:\n        key <string>     : localStorage key to remove\n    returns:\n        <boolean> : telling if operation succeeded\n */\nexport function removeStorage(key) {\n    try {\n        localStorage.setItem(key, \"\");\n        localStorage.setItem(key + \"_expiresIn\", \"\");\n    } catch (e) {\n        console.log(\n            \"removeStorage: Error removing key [\" +\n            key +\n            \"] from localStorage: \" +\n            JSON.stringify(e)\n        );\n        return false;\n    }\n    return true;\n}\n\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\n    params:\n        key <string> : localStorage key\n    returns:\n        <string> : value of localStorage key\n        null : in case of expired key or failure\n */\nexport function getStorage(key) {\n    const now = Date.now(); //epoch time, lets deal only with integer\n    // set expiration for storage\n    let expiresIn = localStorage.getItem(key + \"_expiresIn\");\n    if (expiresIn === undefined || expiresIn === null) {\n        expiresIn = 0;\n    }\n\n    expiresIn = Math.abs(expiresIn);\n    if (expiresIn < now) {\n        // Expired\n        removeStorage(key);\n        return null;\n    } else {\n        try {\n            const value = localStorage.getItem(key);\n            return value;\n        } catch (e) {\n            console.log(\n                \"getStorage: Error reading key [\" +\n                key +\n                \"] from localStorage: \" +\n                JSON.stringify(e)\n            );\n            return null;\n        }\n    }\n}\n\n/*  setStorage: writes a key into localStorage setting a expire time\n    params:\n        key <string>     : localStorage key\n        value <string>   : localStorage value\n        expires <number> : number of seconds from now to expire the key\n    returns:\n        <boolean> : telling if operation succeeded\n */\nexport function setStorage(key, value, expires) {\n    if (expires === undefined || expires === null) {\n        expires = 24 * 60 * 60; // default: seconds for 1 day\n    }\n\n    const now = Date.now(); //millisecs since epoch time, lets deal only with integer\n    const schedule = now + expires * 1000;\n    try {\n        localStorage.setItem(key, value);\n        localStorage.setItem(key + \"_expiresIn\", schedule);\n    } catch (e) {\n        console.log(\n            \"setStorage: Error setting key [\" +\n            key +\n            \"] in localStorage: \" +\n            JSON.stringify(e)\n        );\n        return false;\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}