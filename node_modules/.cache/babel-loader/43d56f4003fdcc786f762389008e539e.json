{"ast":null,"code":"var _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/pages/products/products-table/ProductsTable.js\";\n// React bootstrap table next =>\n// DOCS: https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/\n// STORYBOOK: https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html\nimport React, { useEffect, useMemo } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory, { PaginationProvider } from \"react-bootstrap-table2-paginator\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../_redux/products/productsActions\";\nimport * as uiHelpers from \"../ProductsUIHelpers\";\nimport { getSelectRow, getHandlerTableChange, NoRecordsFoundMessage, PleaseWaitMessage, sortCaret } from \"../../../../../../_metronic/_helpers\";\nimport * as columnFormatters from \"./column-formatters\";\nimport { Pagination } from \"../../../../../../_metronic/_partials/controls\";\nimport { useProductsUIContext } from \"../ProductsUIContext\";\nexport function ProductsTable() {\n  var _this = this;\n\n  // Products UI Context\n  var productsUIContext = useProductsUIContext();\n  var productsUIProps = useMemo(function () {\n    return {\n      ids: productsUIContext.ids,\n      setIds: productsUIContext.setIds,\n      queryParams: productsUIContext.queryParams,\n      setQueryParams: productsUIContext.setQueryParams,\n      openEditProductPage: productsUIContext.openEditProductPage,\n      openDeleteProductDialog: productsUIContext.openDeleteProductDialog\n    };\n  }, [productsUIContext]); // Getting curret state of products list from store (Redux)\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      currentState: state.products\n    };\n  }, shallowEqual),\n      currentState = _useSelector.currentState;\n\n  var totalCount = currentState.totalCount,\n      entities = currentState.entities,\n      listLoading = currentState.listLoading; // Products Redux state\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    // clear selections list\n    productsUIProps.setIds([]); // server call by queryParams\n\n    dispatch(actions.fetchProducts(productsUIProps.queryParams)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [productsUIProps.queryParams, dispatch]); // Table columns\n\n  var columns = [{\n    dataField: \"VINCode\",\n    text: \"VIN Code (ID)\",\n    sort: true,\n    sortCaret: sortCaret\n  }, {\n    dataField: \"manufacture\",\n    text: \"Manufacture\",\n    sort: true,\n    sortCaret: sortCaret\n  }, {\n    dataField: \"model\",\n    text: \"Model\",\n    sort: true,\n    sortCaret: sortCaret\n  }, {\n    dataField: \"modelYear\",\n    text: \"Model Year\",\n    sort: true,\n    sortCaret: sortCaret\n  }, {\n    dataField: \"color\",\n    text: \"Color\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.ColorColumnFormatter\n  }, {\n    dataField: \"price\",\n    text: \"Price\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.PriceColumnFormatter\n  }, {\n    dataField: \"status\",\n    text: \"Status\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.StatusColumnFormatter\n  }, {\n    dataField: \"condition\",\n    text: \"Condition\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.ConditionColumnFormatter\n  }, {\n    dataField: \"action\",\n    text: \"Actions\",\n    formatter: columnFormatters.ActionsColumnFormatter,\n    formatExtraData: {\n      openEditProductPage: productsUIProps.openEditProductPage,\n      openDeleteProductDialog: productsUIProps.openDeleteProductDialog\n    },\n    classes: \"text-right pr-0\",\n    headerClasses: \"text-right pr-3\",\n    style: {\n      minWidth: \"100px\"\n    }\n  }]; // Table pagination properties\n\n  var paginationOptions = {\n    custom: true,\n    totalSize: totalCount,\n    sizePerPageList: uiHelpers.sizePerPageList,\n    sizePerPage: productsUIProps.queryParams.pageSize,\n    page: productsUIProps.queryParams.pageNumber\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PaginationProvider, {\n    pagination: paginationFactory(paginationOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var paginationProps = _ref.paginationProps,\n        paginationTableProps = _ref.paginationTableProps;\n    return /*#__PURE__*/React.createElement(Pagination, {\n      isLoading: listLoading,\n      paginationProps: paginationProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({\n      wrapperClasses: \"table-responsive\",\n      classes: \"table table-head-custom table-vertical-center overflow-hidden\",\n      bootstrap4: true,\n      bordered: false,\n      remote: true,\n      keyField: \"id\",\n      data: entities === null ? [] : entities,\n      columns: columns,\n      defaultSorted: uiHelpers.defaultSorted,\n      onTableChange: getHandlerTableChange(productsUIProps.setQueryParams),\n      selectRow: getSelectRow({\n        entities: entities,\n        ids: productsUIProps.ids,\n        setIds: productsUIProps.setIds\n      })\n    }, paginationTableProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(PleaseWaitMessage, {\n      entities: entities,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NoRecordsFoundMessage, {\n      entities: entities,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    })));\n  }));\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/pages/products/products-table/ProductsTable.js"],"names":["React","useEffect","useMemo","BootstrapTable","paginationFactory","PaginationProvider","shallowEqual","useDispatch","useSelector","actions","uiHelpers","getSelectRow","getHandlerTableChange","NoRecordsFoundMessage","PleaseWaitMessage","sortCaret","columnFormatters","Pagination","useProductsUIContext","ProductsTable","productsUIContext","productsUIProps","ids","setIds","queryParams","setQueryParams","openEditProductPage","openDeleteProductDialog","state","currentState","products","totalCount","entities","listLoading","dispatch","fetchProducts","columns","dataField","text","sort","formatter","ColorColumnFormatter","PriceColumnFormatter","StatusColumnFormatter","ConditionColumnFormatter","ActionsColumnFormatter","formatExtraData","classes","headerClasses","style","minWidth","paginationOptions","custom","totalSize","sizePerPageList","sizePerPage","pageSize","page","pageNumber","paginationProps","paginationTableProps","defaultSorted"],"mappings":"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","sourcesContent":["// React bootstrap table next =>\n// DOCS: https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/\n// STORYBOOK: https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html\nimport React, { useEffect, useMemo } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory, {\n  PaginationProvider,\n} from \"react-bootstrap-table2-paginator\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../_redux/products/productsActions\";\nimport * as uiHelpers from \"../ProductsUIHelpers\";\nimport {\n  getSelectRow,\n  getHandlerTableChange,\n  NoRecordsFoundMessage,\n  PleaseWaitMessage,\n  sortCaret,\n} from \"../../../../../../_metronic/_helpers\";\nimport * as columnFormatters from \"./column-formatters\";\nimport { Pagination } from \"../../../../../../_metronic/_partials/controls\";\nimport { useProductsUIContext } from \"../ProductsUIContext\";\n\nexport function ProductsTable() {\n  // Products UI Context\n  const productsUIContext = useProductsUIContext();\n  const productsUIProps = useMemo(() => {\n    return {\n      ids: productsUIContext.ids,\n      setIds: productsUIContext.setIds,\n      queryParams: productsUIContext.queryParams,\n      setQueryParams: productsUIContext.setQueryParams,\n      openEditProductPage: productsUIContext.openEditProductPage,\n      openDeleteProductDialog: productsUIContext.openDeleteProductDialog,\n    };\n  }, [productsUIContext]);\n\n  // Getting curret state of products list from store (Redux)\n  const { currentState } = useSelector(\n    (state) => ({ currentState: state.products }),\n    shallowEqual\n  );\n  const { totalCount, entities, listLoading } = currentState;\n  // Products Redux state\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // clear selections list\n    productsUIProps.setIds([]);\n    // server call by queryParams\n    dispatch(actions.fetchProducts(productsUIProps.queryParams));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [productsUIProps.queryParams, dispatch]);\n  // Table columns\n  const columns = [\n    {\n      dataField: \"VINCode\",\n      text: \"VIN Code (ID)\",\n      sort: true,\n      sortCaret: sortCaret,\n    },\n    {\n      dataField: \"manufacture\",\n      text: \"Manufacture\",\n      sort: true,\n      sortCaret: sortCaret,\n    },\n    {\n      dataField: \"model\",\n      text: \"Model\",\n      sort: true,\n      sortCaret: sortCaret,\n    },\n    {\n      dataField: \"modelYear\",\n      text: \"Model Year\",\n      sort: true,\n      sortCaret: sortCaret,\n    },\n    {\n      dataField: \"color\",\n      text: \"Color\",\n      sort: true,\n      sortCaret: sortCaret,\n      formatter: columnFormatters.ColorColumnFormatter,\n    },\n    {\n      dataField: \"price\",\n      text: \"Price\",\n      sort: true,\n      sortCaret: sortCaret,\n      formatter: columnFormatters.PriceColumnFormatter,\n    },\n    {\n      dataField: \"status\",\n      text: \"Status\",\n      sort: true,\n      sortCaret: sortCaret,\n      formatter: columnFormatters.StatusColumnFormatter,\n    },\n    {\n      dataField: \"condition\",\n      text: \"Condition\",\n      sort: true,\n      sortCaret: sortCaret,\n      formatter: columnFormatters.ConditionColumnFormatter,\n    },\n    {\n      dataField: \"action\",\n      text: \"Actions\",\n      formatter: columnFormatters.ActionsColumnFormatter,\n      formatExtraData: {\n        openEditProductPage: productsUIProps.openEditProductPage,\n        openDeleteProductDialog: productsUIProps.openDeleteProductDialog,\n      },\n      classes: \"text-right pr-0\",\n      headerClasses: \"text-right pr-3\",\n      style: {\n        minWidth: \"100px\",\n      },\n    },\n  ];\n  // Table pagination properties\n  const paginationOptions = {\n    custom: true,\n    totalSize: totalCount,\n    sizePerPageList: uiHelpers.sizePerPageList,\n    sizePerPage: productsUIProps.queryParams.pageSize,\n    page: productsUIProps.queryParams.pageNumber,\n  };\n  return (\n    <>\n      <PaginationProvider pagination={paginationFactory(paginationOptions)}>\n        {({ paginationProps, paginationTableProps }) => {\n          return (\n            <Pagination\n              isLoading={listLoading}\n              paginationProps={paginationProps}\n            >\n              <BootstrapTable\n                wrapperClasses=\"table-responsive\"\n                classes=\"table table-head-custom table-vertical-center overflow-hidden\"\n                bootstrap4\n                bordered={false}\n                remote\n                keyField=\"id\"\n                data={entities === null ? [] : entities}\n                columns={columns}\n                defaultSorted={uiHelpers.defaultSorted}\n                onTableChange={getHandlerTableChange(\n                  productsUIProps.setQueryParams\n                )}\n                selectRow={getSelectRow({\n                  entities,\n                  ids: productsUIProps.ids,\n                  setIds: productsUIProps.setIds,\n                })}\n                {...paginationTableProps}\n              >\n                <PleaseWaitMessage entities={entities} />\n                <NoRecordsFoundMessage entities={entities} />\n              </BootstrapTable>\n            </Pagination>\n          );\n        }}\n      </PaginationProvider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}