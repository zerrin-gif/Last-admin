{"ast":null,"code":"import _toConsumableArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport customerTableMock from \"./customerTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockCustomer(mock) {\n  mock.onPost(\"api/customers\").reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        customer = _JSON$parse.customer;\n\n    var _customer$firstName = customer.firstName,\n        firstName = _customer$firstName === void 0 ? \"\" : _customer$firstName,\n        _customer$lastName = customer.lastName,\n        lastName = _customer$lastName === void 0 ? \"\" : _customer$lastName,\n        _customer$email = customer.email,\n        email = _customer$email === void 0 ? \"\" : _customer$email,\n        _customer$userName = customer.userName,\n        userName = _customer$userName === void 0 ? \"\" : _customer$userName,\n        _customer$gender = customer.gender,\n        gender = _customer$gender === void 0 ? \"Female\" : _customer$gender,\n        _customer$status = customer.status,\n        status = _customer$status === void 0 ? 0 : _customer$status,\n        _customer$dateOfBbirt = customer.dateOfBbirth,\n        dateOfBbirth = _customer$dateOfBbirt === void 0 ? \"01/01/2019\" : _customer$dateOfBbirt,\n        _customer$ipAddress = customer.ipAddress,\n        ipAddress = _customer$ipAddress === void 0 ? \"127.0.0.1\" : _customer$ipAddress,\n        _customer$type = customer.type,\n        type = _customer$type === void 0 ? 1 : _customer$type;\n    var id = generateUserId();\n    var newCustomer = {\n      id: id,\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      userName: userName,\n      gender: gender,\n      status: status,\n      dateOfBbirth: dateOfBbirth,\n      ipAddress: ipAddress,\n      type: type\n    };\n    customerTableMock.push(newCustomer);\n    return [200, {\n      customer: newCustomer\n    }];\n  });\n  mock.onPost(\"api/customers/find\").reply(function (config) {\n    var mockUtils = new MockUtils();\n\n    var _JSON$parse2 = JSON.parse(config.data),\n        queryParams = _JSON$parse2.queryParams;\n\n    var filterdCustomers = mockUtils.baseFilter(customerTableMock, queryParams);\n    return [200, filterdCustomers];\n  });\n  mock.onPost(\"api/customers/deleteCustomers\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n        ids = _JSON$parse3.ids;\n\n    ids.forEach(function (id) {\n      var index = customerTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n\n      if (index > -1) {\n        customerTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(function (config) {\n    var _JSON$parse4 = JSON.parse(config.data),\n        ids = _JSON$parse4.ids,\n        status = _JSON$parse4.status;\n\n    customerTableMock.forEach(function (el) {\n      if (ids.findIndex(function (id) {\n        return id === el.id;\n      }) > -1) {\n        el.status = status;\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    var customer = customerTableMock.find(function (el) {\n      return el.id === +id;\n    });\n\n    if (!customer) {\n      return [400];\n    }\n\n    return [200, customer];\n  });\n  mock.onPut(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n\n    var _JSON$parse5 = JSON.parse(config.data),\n        customer = _JSON$parse5.customer;\n\n    var index = customerTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n\n    if (!index) {\n      return [400];\n    }\n\n    customerTableMock[index] = _objectSpread({}, customer);\n    return [200];\n  });\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    var index = customerTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    customerTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateUserId() {\n  var ids = customerTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/__mocks__/mockCustomer.js"],"names":["customerTableMock","MockUtils","mockCustomer","mock","onPost","reply","data","JSON","parse","customer","firstName","lastName","email","userName","gender","status","dateOfBbirth","ipAddress","type","id","generateUserId","newCustomer","push","config","mockUtils","queryParams","filterdCustomers","baseFilter","ids","forEach","index","findIndex","el","splice","onGet","url","match","find","onPut","onDelete","map","maxId","Math","max"],"mappings":"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","sourcesContent":["import customerTableMock from \"./customerTableMock\";\nimport MockUtils from \"./mock.utils\";\n\nexport default function mockCustomer(mock) {\n  mock.onPost(\"api/customers\").reply(({ data }) => {\n    const { customer } = JSON.parse(data);\n    const {\n      firstName = \"\",\n      lastName = \"\",\n      email = \"\",\n      userName = \"\",\n      gender = \"Female\",\n      status = 0,\n      dateOfBbirth = \"01/01/2019\",\n      ipAddress = \"127.0.0.1\",\n      type = 1\n    } = customer;\n\n    const id = generateUserId();\n    const newCustomer = {\n      id,\n      firstName,\n      lastName,\n      email,\n      userName,\n      gender,\n      status,\n      dateOfBbirth,\n      ipAddress,\n      type\n    };\n    customerTableMock.push(newCustomer);\n    return [200, { customer: newCustomer }];\n  });\n\n  mock.onPost(\"api/customers/find\").reply(config => {\n    const mockUtils = new MockUtils();\n    const { queryParams } = JSON.parse(config.data);\n    const filterdCustomers = mockUtils.baseFilter(\n      customerTableMock,\n      queryParams\n    );\n    return [200, filterdCustomers];\n  });\n\n  mock.onPost(\"api/customers/deleteCustomers\").reply(config => {\n    const { ids } = JSON.parse(config.data);\n    ids.forEach(id => {\n      const index = customerTableMock.findIndex(el => el.id === id);\n      if (index > -1) {\n        customerTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(config => {\n    const { ids, status } = JSON.parse(config.data);\n    customerTableMock.forEach(el => {\n      if (ids.findIndex(id => id === el.id) > -1) {\n        el.status = status;\n      }\n    });\n    return [200];\n  });\n\n  mock.onGet(/api\\/customers\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    const customer = customerTableMock.find(el => el.id === +id);\n    if (!customer) {\n      return [400];\n    }\n\n    return [200, customer];\n  });\n\n  mock.onPut(/api\\/customers\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    const { customer } = JSON.parse(config.data);\n    const index = customerTableMock.findIndex(el => el.id === +id);\n    if (!index) {\n      return [400];\n    }\n\n    customerTableMock[index] = { ...customer };\n    return [200];\n  });\n\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    const index = customerTableMock.findIndex(el => el.id === +id);\n    customerTableMock.splice(index, 1);\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateUserId() {\n  const ids = customerTableMock.map(el => el.id);\n  const maxId = Math.max(...ids);\n  return maxId + 1;\n}\n"]},"metadata":{},"sourceType":"module"}