{"ast":null,"code":"import _toConsumableArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport remarkTableMock from \"./remarkTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockRemarks(mock) {\n  mock.onPost(\"api/remarks\").reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        remark = _JSON$parse.remark;\n\n    var carId = remark.carId,\n        _remark$text = remark.text,\n        text = _remark$text === void 0 ? \"\" : _remark$text,\n        _remark$dueDate = remark.dueDate,\n        dueDate = _remark$dueDate === void 0 ? \"01/01/2019\" : _remark$dueDate,\n        _remark$type = remark.type,\n        type = _remark$type === void 0 ? 0 : _remark$type;\n    var id = generateRemarkId();\n    var newRemark = {\n      id: id,\n      carId: +carId,\n      text: text,\n      dueDate: dueDate,\n      type: type\n    };\n    remarkTableMock.push(newRemark);\n    return [200, {\n      remark: newRemark\n    }];\n  });\n  mock.onPost(/api\\/remarksfind\\/\\d+/).reply(function (config) {\n    var urls = config.url.split(\"/\");\n    var id = urls[2];\n    var mockUtils = new MockUtils();\n\n    var _JSON$parse2 = JSON.parse(config.data),\n        queryParams = _JSON$parse2.queryParams;\n\n    var productRemarks = remarkTableMock.filter(function (el) {\n      return el.carId === +id;\n    });\n    var filterdRemarks = mockUtils.baseFilter(productRemarks, queryParams);\n    return [200, filterdRemarks];\n  });\n  mock.onPost(\"api/remarks/deleteRemarks\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n        ids = _JSON$parse3.ids;\n\n    ids.forEach(function (id) {\n      var index = remarkTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n\n      if (index > -1) {\n        remarkTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/remarks\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    var remark = remarkTableMock.find(function (el) {\n      return el.id === +id;\n    });\n\n    if (!remark) {\n      return [400];\n    }\n\n    return [200, remark];\n  });\n  mock.onPut(/api\\/remarks\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n\n    var _JSON$parse4 = JSON.parse(config.data),\n        remark = _JSON$parse4.remark;\n\n    var index = remarkTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n\n    if (!index) {\n      return [400];\n    }\n\n    remarkTableMock[index] = _objectSpread({}, remark);\n    return [200];\n  });\n  mock.onDelete(/api\\/remarks\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    var index = remarkTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    remarkTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateRemarkId() {\n  var ids = remarkTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/__mocks__/mockRemark.js"],"names":["remarkTableMock","MockUtils","mockRemarks","mock","onPost","reply","data","JSON","parse","remark","carId","text","dueDate","type","id","generateRemarkId","newRemark","push","config","urls","url","split","mockUtils","queryParams","productRemarks","filter","el","filterdRemarks","baseFilter","ids","forEach","index","findIndex","splice","onGet","match","find","onPut","onDelete","map","maxId","Math","max"],"mappings":"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","sourcesContent":["import remarkTableMock from \"./remarkTableMock\";\nimport MockUtils from \"./mock.utils\";\n\nexport default function mockRemarks(mock) {\n  mock.onPost(\"api/remarks\").reply(({ data }) => {\n    const { remark } = JSON.parse(data);\n    const { carId, text = \"\", dueDate = \"01/01/2019\", type = 0 } = remark;\n    const id = generateRemarkId();\n    const newRemark = {\n      id,\n      carId: +carId,\n      text,\n      dueDate,\n      type\n    };\n    remarkTableMock.push(newRemark);\n    return [200, { remark: newRemark }];\n  });\n\n  mock.onPost(/api\\/remarksfind\\/\\d+/).reply(config => {\n    const urls = config.url.split(\"/\");\n    const id = urls[2];\n    const mockUtils = new MockUtils();\n    const { queryParams } = JSON.parse(config.data);\n    const productRemarks = remarkTableMock.filter(el => el.carId === +id);\n    const filterdRemarks = mockUtils.baseFilter(productRemarks, queryParams);\n    return [200, filterdRemarks];\n  });\n\n  mock.onPost(\"api/remarks/deleteRemarks\").reply(config => {\n    const { ids } = JSON.parse(config.data);\n    ids.forEach(id => {\n      const index = remarkTableMock.findIndex(el => el.id === id);\n      if (index > -1) {\n        remarkTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n\n  mock.onGet(/api\\/remarks\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    const remark = remarkTableMock.find(el => el.id === +id);\n    if (!remark) {\n      return [400];\n    }\n\n    return [200, remark];\n  });\n\n  mock.onPut(/api\\/remarks\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    const { remark } = JSON.parse(config.data);\n    const index = remarkTableMock.findIndex(el => el.id === +id);\n    if (!index) {\n      return [400];\n    }\n\n    remarkTableMock[index] = { ...remark };\n    return [200];\n  });\n\n  mock.onDelete(/api\\/remarks\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    const index = remarkTableMock.findIndex(el => el.id === +id);\n    remarkTableMock.splice(index, 1);\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateRemarkId() {\n  const ids = remarkTableMock.map(el => el.id);\n  const maxId = Math.max(...ids);\n  return maxId + 1;\n}\n"]},"metadata":{},"sourceType":"module"}