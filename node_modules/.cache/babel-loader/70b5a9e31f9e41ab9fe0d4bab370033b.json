{"ast":null,"code":"import _classCallCheck from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/ReactBootstrapExamples/AlertExamplesPage.js\";\nimport React from \"react\";\nimport { Alert, Button } from \"react-bootstrap\";\nimport { Notice, KTCodeExample } from \"../../../_metronic/_partials/controls\";\n\nvar AlertDismissible = /*#__PURE__*/function (_React$Component) {\n  _inherits(AlertDismissible, _React$Component);\n\n  var _super = _createSuper(AlertDismissible);\n\n  function AlertDismissible(props) {\n    var _this;\n\n    _classCallCheck(this, AlertDismissible);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      show: true\n    };\n    return _this;\n  }\n\n  _createClass(AlertDismissible, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var handleHide = function handleHide() {\n        return _this2.setState({\n          show: false\n        });\n      };\n\n      var handleShow = function handleShow() {\n        return _this2.setState({\n          show: true\n        });\n      };\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Alert, {\n        show: this.state.show,\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Alert.Heading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }\n      }, \"How's it going?!\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }\n      }, \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum.\"), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: handleHide,\n        variant: \"outline-success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      }, \"Close me ya'll!\"))), !this.state.show && /*#__PURE__*/React.createElement(Button, {\n        onClick: handleShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 30\n        }\n      }, \"Show Alert\"));\n    }\n  }]);\n\n  return AlertDismissible;\n}(React.Component);\n\nvar AlertDismissibleExample = /*#__PURE__*/function (_React$Component2) {\n  _inherits(AlertDismissibleExample, _React$Component2);\n\n  var _super2 = _createSuper(AlertDismissibleExample);\n\n  function AlertDismissibleExample(props) {\n    var _this3;\n\n    _classCallCheck(this, AlertDismissibleExample);\n\n    _this3 = _super2.call(this, props);\n    _this3.state = {\n      show: true\n    };\n    return _this3;\n  }\n\n  _createClass(AlertDismissibleExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var handleDismiss = function handleDismiss() {\n        return _this4.setState({\n          show: false\n        });\n      };\n\n      var handleShow = function handleShow() {\n        return _this4.setState({\n          show: true\n        });\n      };\n\n      if (this.state.show) {\n        return /*#__PURE__*/React.createElement(Alert, {\n          variant: \"danger\",\n          onClose: handleDismiss,\n          dismissible: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Alert.Heading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }\n        }, \"Oh snap! You got an error!\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }\n        }, \"Change this and that and try again. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum.\"));\n      }\n\n      return /*#__PURE__*/React.createElement(Button, {\n        onClick: handleShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 12\n        }\n      }, \"Show Alert\");\n    }\n  }]);\n\n  return AlertDismissibleExample;\n}(React.Component);\n\nvar AlertExamplesPage = /*#__PURE__*/function (_React$Component3) {\n  _inherits(AlertExamplesPage, _React$Component3);\n\n  var _super3 = _createSuper(AlertExamplesPage);\n\n  function AlertExamplesPage() {\n    _classCallCheck(this, AlertExamplesPage);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(AlertExamplesPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n        icon: \"flaticon-warning font-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, \"Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        className: \"font-weight-bold\",\n        rel: \"noopener noreferrer\",\n        href: \"https://react-bootstrap.github.io/components/alerts/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode1,\n        beforeCodeTitle: \"Examples\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      }, \"Alerts are available for any length of text, as well as an optional dismiss button. For proper styling, use one of the eight \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 23\n        }\n      }, \"variant\"), \"s.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }\n      }, [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\", \"dark\"].map(function (variant, idx) {\n        return /*#__PURE__*/React.createElement(Alert, {\n          key: idx,\n          variant: variant,\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }\n        }, \"This is a \", variant, \" alert\\u2014check it out!\");\n      }))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode3,\n        beforeCodeTitle: \"Additional content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, \"Alerts can contain whatever content you like. Headers, paragraphs, dividers, go crazy.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Alert, {\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Alert.Heading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }\n      }, \"Hey, nice to see you\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }, \"Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.\"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, \"Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\"))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode4,\n        beforeCodeTitle: \"Dismissing\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }\n      }, \"Add the \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, \"dismissible\"), \" prop to add a functioning dismiss button to the Alert.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(AlertDismissibleExample, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode2,\n        beforeCodeTitle: \"Links\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }\n      }, \"For links, use the \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 36\n        }\n      }, \"<Alert.Link>\"), \" component to provide matching colored links within any alert.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }\n      }, [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\", \"dark\"].map(function (variant, idx) {\n        return /*#__PURE__*/React.createElement(Alert, {\n          key: idx,\n          variant: variant,\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 19\n          }\n        }, \"This is a \", variant, \" alert with \\xA0\", /*#__PURE__*/React.createElement(Alert.Link, {\n          href: \"#\",\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }\n        }, \"an example link\"), \". Give it a click if you like.\");\n      }))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode5,\n        beforeCodeTitle: \"Dismissing\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }\n      }, \"You can also control the visual state directly which is great if you want to build more complicated alerts.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(AlertDismissible, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return AlertExamplesPage;\n}(React.Component);\n\nexport { AlertExamplesPage as default };\nvar jsCode1 = \"\\n[\\n  'primary',\\n  'secondary',\\n  'success',\\n  'danger',\\n  'warning',\\n  'info',\\n  'light',\\n  'dark',\\n].map((variant, idx) => (\\n  <Alert key={idx} variant={variant}>\\n    This is a {variant} alert\\u2014check it out!\\n  </Alert>\\n));\\n\";\nvar jsCode2 = \"\\n[\\n  'primary',\\n  'secondary',\\n  'success',\\n  'danger',\\n  'warning',\\n  'info',\\n  'light',\\n  'dark',\\n].map((variant, idx) => (\\n  <Alert key={idx} variant={variant}>\\n    This is a {variant} alert with{' '}\\n    <Alert.Link href=\\\"#\\\">an example link</Alert.Link>. Give it a click if you\\n    like.\\n  </Alert>\\n));\\n\";\nvar jsCode3 = \"\\n<Alert variant=\\\"success\\\">\\n  <Alert.Heading>Hey, nice to see you</Alert.Heading>\\n  <p>\\n    Aww yeah, you successfully read this important alert message. This example\\n    text is going to run a bit longer so that you can see how spacing within an\\n    alert works with this kind of content.\\n  </p>\\n  <hr />\\n  <p className=\\\"mb-0\\\">\\n    Whenever you need to, be sure to use margin utilities to keep things nice\\n    and tidy.\\n  </p>\\n</Alert>\\n\";\nvar jsCode4 = \"\\nclass AlertDismissibleExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      show: true,\\n    };\\n  }\\n\\n  render() {\\n    const handleDismiss = () => this.setState({ show: false });\\n    const handleShow = () => this.setState({ show: true });\\n    if (this.state.show) {\\n      return (\\n        <Alert variant=\\\"danger\\\" onClose={handleDismiss} dismissible>\\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\\n          <p>\\n            Change this and that and try again. Duis mollis, est non commodo\\n            luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\\n            Cras mattis consectetur purus sit amet fermentum.\\n          </p>\\n        </Alert>\\n      );\\n    }\\n    return <Button onClick={handleShow}>Show Alert</Button>;\\n  }\\n}\\n\\nrender(<AlertDismissibleExample />);\\n\";\nvar jsCode5 = \"\\nclass AlertDismissible extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = { show: true };\\n  }\\n\\n  render() {\\n    const handleHide = () => this.setState({ show: false });\\n    const handleShow = () => this.setState({ show: true });\\n    return (\\n      <>\\n        <Alert show={this.state.show} variant=\\\"success\\\">\\n          <Alert.Heading>How's it going?!</Alert.Heading>\\n          <p>\\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula,\\n            eget lacinia odio sem nec elit. Cras mattis consectetur purus sit\\n            amet fermentum.\\n          </p>\\n          <hr />\\n          <div className=\\\"d-flex justify-content-end\\\">\\n            <Button onClick={handleHide} variant=\\\"outline-success\\\">\\n              Close me ya'll!\\n            </Button>\\n          </div>\\n        </Alert>\\n\\n        {!this.state.show && <Button onClick={handleShow}>Show Alert</Button>}\\n      </>\\n    );\\n  }\\n}\\n\\nrender(<AlertDismissible />);\\n\";","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ReactBootstrapExamples/AlertExamplesPage.js"],"names":["React","Alert","Button","Notice","KTCodeExample","AlertDismissible","props","state","show","handleHide","setState","handleShow","Component","AlertDismissibleExample","handleDismiss","AlertExamplesPage","jsCode1","map","variant","idx","jsCode3","jsCode4","jsCode2","jsCode5"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,iBAA5B;AACA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,uCAApC;;IAEMC,gB;;;;;AACJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AAHiB;AAIlB;;;;WAED,kBAAS;AAAA;;AACP,UAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,eAAM,MAAI,CAACC,QAAL,CAAc;AAAEF,UAAAA,IAAI,EAAE;AAAR,SAAd,CAAN;AAAA,OAAnB;;AACA,UAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,eAAM,MAAI,CAACD,QAAL,CAAc;AAAEF,UAAAA,IAAI,EAAE;AAAR,SAAd,CAAN;AAAA,OAAnB;;AACA,0BACE,uDACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAxB;AAA8B,QAAA,OAAO,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8JAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,eAQE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAA6B,QAAA,OAAO,EAAC,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CARF,CADF,EAgBG,CAAC,KAAKF,KAAL,CAAWC,IAAZ,iBAAoB,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEG,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhBvB,CADF;AAoBD;;;;EA9B4BX,KAAK,CAACY,S;;IAgC/BC,uB;;;;;AACJ,mCAAYP,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gCAAMA,KAAN;AACA,WAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAFiB;AAKlB;;;;WAED,kBAAS;AAAA;;AACP,UAAMM,aAAa,GAAG,SAAhBA,aAAgB;AAAA,eAAM,MAAI,CAACJ,QAAL,CAAc;AAAEF,UAAAA,IAAI,EAAE;AAAR,SAAd,CAAN;AAAA,OAAtB;;AACA,UAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,eAAM,MAAI,CAACD,QAAL,CAAc;AAAEF,UAAAA,IAAI,EAAE;AAAR,SAAd,CAAN;AAAA,OAAnB;;AACA,UAAI,KAAKD,KAAL,CAAWC,IAAf,EAAqB;AACnB,4BACE,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,QAAf;AAAwB,UAAA,OAAO,EAAEM,aAAjC;AAAgD,UAAA,WAAW,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oMAFF,CADF;AAUD;;AACD,0BAAO,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEH,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;;;EAxBmCX,KAAK,CAACY,S;;IA2BvBG,iB;;;;;;;;;;;;;WACnB,kBAAS;AAAA;;AACP,0BACE,uDACE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,+BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oIADF,EAIU,GAJV,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEACuD,GADvD,eAEE;AACE,QAAA,MAAM,EAAC,QADT;AAEE,QAAA,SAAS,EAAC,kBAFZ;AAGE,QAAA,GAAG,EAAC,qBAHN;AAIE,QAAA,IAAI,EAAC,sDAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFF,CALF,CADF,eAmBE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAEC,OAAvB;AAAgC,QAAA,eAAe,EAAC,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uJAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHR,OADF,eAME;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CACC,SADD,EAEC,WAFD,EAGC,SAHD,EAIC,QAJD,EAKC,SALD,EAMC,MAND,EAOC,OAPD,EAQC,MARD,EASCC,GATD,CASK,UAACC,OAAD,EAAUC,GAAV;AAAA,4BACJ,oBAAC,KAAD;AAAO,UAAA,GAAG,EAAEA,GAAZ;AAAiB,UAAA,OAAO,EAAED,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACaA,OADb,8BADI;AAAA,OATL,CADH,CAPF,CADF,eA0BE,oBAAC,aAAD;AACE,QAAA,MAAM,EAAEE,OADV;AAEE,QAAA,eAAe,EAAC,oBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGAJF,eAQE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,eASE,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,eAEE;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yMAFF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FARF,CATF,CA1BF,eAkDE,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAEC,OAAvB;AAAgC,QAAA,eAAe,EAAC,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADV,4DADF,eAKE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,eAME,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CAlDF,CADF,eA4DE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAEC,OAAvB;AAAgC,QAAA,eAAe,EAAC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADrB,mEADF,eAKE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CACC,SADD,EAEC,WAFD,EAGC,SAHD,EAIC,QAJD,EAKC,SALD,EAMC,MAND,EAOC,OAPD,EAQC,MARD,EASCL,GATD,CASK,UAACC,OAAD,EAAUC,GAAV;AAAA,4BACJ,oBAAC,KAAD;AAAO,UAAA,GAAG,EAAEA,GAAZ;AAAiB,UAAA,OAAO,EAAED,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACaA,OADb,mCAEE,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,IAAI,EAAC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFF,mCADI;AAAA,OATL,CADH,CANF,CADF,eA2BE,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAEK,OAAvB;AAAgC,QAAA,eAAe,EAAC,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uHADF,eAKE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,eAME,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CA3BF,CA5DF,CAnBF,CADF;AAuHD;;;;EAzH4CvB,KAAK,CAACY,S;;SAAhCG,iB;AA4HrB,IAAMC,OAAO,wPAAb;AAgBA,IAAMM,OAAO,2UAAb;AAkBA,IAAMF,OAAO,2cAAb;AAeA,IAAMC,OAAO,o3BAAb;AA8BA,IAAME,OAAO,2/BAAb","sourcesContent":["import React from \"react\";\nimport {Alert, Button} from \"react-bootstrap\";\nimport {Notice, KTCodeExample} from \"../../../_metronic/_partials/controls\";\n\nclass AlertDismissible extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { show: true };\n  }\n\n  render() {\n    const handleHide = () => this.setState({ show: false });\n    const handleShow = () => this.setState({ show: true });\n    return (\n      <>\n        <Alert show={this.state.show} variant=\"success\">\n          <Alert.Heading>How's it going?!</Alert.Heading>\n          <p>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula,\n            eget lacinia odio sem nec elit. Cras mattis consectetur purus sit\n            amet fermentum.\n          </p>\n          <hr />\n          <div className=\"d-flex justify-content-end\">\n            <Button onClick={handleHide} variant=\"outline-success\">\n              Close me ya'll!\n            </Button>\n          </div>\n        </Alert>\n\n        {!this.state.show && <Button onClick={handleShow}>Show Alert</Button>}\n      </>\n    );\n  }\n}\nclass AlertDismissibleExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true\n    };\n  }\n\n  render() {\n    const handleDismiss = () => this.setState({ show: false });\n    const handleShow = () => this.setState({ show: true });\n    if (this.state.show) {\n      return (\n        <Alert variant=\"danger\" onClose={handleDismiss} dismissible>\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n          <p>\n            Change this and that and try again. Duis mollis, est non commodo\n            luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\n            Cras mattis consectetur purus sit amet fermentum.\n          </p>\n        </Alert>\n      );\n    }\n    return <Button onClick={handleShow}>Show Alert</Button>;\n  }\n}\n\nexport default class AlertExamplesPage extends React.Component {\n  render() {\n    return (\n      <>\n        <Notice icon=\"flaticon-warning font-primary\">\n          <span>\n            Provide contextual feedback messages for typical user actions with\n            the handful of available and flexible alert messages.\n          </span>{\" \"}\n          <span>\n            For more info please check the components's official{\" \"}\n            <a\n              target=\"_blank\"\n              className=\"font-weight-bold\"\n              rel=\"noopener noreferrer\"\n              href=\"https://react-bootstrap.github.io/components/alerts/\"\n            >\n              demos & documentation\n            </a>\n          </span>\n        </Notice>\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <KTCodeExample jsCode={jsCode1} beforeCodeTitle=\"Examples\">\n              <span>\n                Alerts are available for any length of text, as well as an\n                optional dismiss button. For proper styling, use one of the\n                eight <code>variant</code>s.\n              </span>\n              <div className=\"separator separator-dashed my-7\"></div>\n              <div>\n                {[\n                  \"primary\",\n                  \"secondary\",\n                  \"success\",\n                  \"danger\",\n                  \"warning\",\n                  \"info\",\n                  \"light\",\n                  \"dark\"\n                ].map((variant, idx) => (\n                  <Alert key={idx} variant={variant}>\n                    This is a {variant} alert—check it out!\n                  </Alert>\n                ))}\n              </div>\n            </KTCodeExample>\n\n            <KTCodeExample\n              jsCode={jsCode3}\n              beforeCodeTitle=\"Additional content\"\n            >\n              <span>\n                Alerts can contain whatever content you like. Headers,\n                paragraphs, dividers, go crazy.\n              </span>\n              <div className=\"separator separator-dashed my-7\"></div>\n              <Alert variant=\"success\">\n                <Alert.Heading>Hey, nice to see you</Alert.Heading>\n                <span className=\"pb-4\">\n                  Aww yeah, you successfully read this important alert message.\n                  This example text is going to run a bit longer so that you can\n                  see how spacing within an alert works with this kind of\n                  content.\n                </span>\n                <span>\n                  Whenever you need to, be sure to use margin utilities to keep\n                  things nice and tidy.\n                </span>\n              </Alert>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode4} beforeCodeTitle=\"Dismissing\">\n              <span>\n                Add the <code>dismissible</code> prop to add a functioning\n                dismiss button to the Alert.\n              </span>\n              <div className=\"separator separator-dashed my-7\"></div>\n              <AlertDismissibleExample />\n            </KTCodeExample>\n          </div>\n          <div className=\"col-md-6\">\n            <KTCodeExample jsCode={jsCode2} beforeCodeTitle=\"Links\">\n              <span>\n                For links, use the <code>&lt;Alert.Link&gt;</code> component to\n                provide matching colored links within any alert.\n              </span>\n              <div className=\"separator separator-dashed my-7\"></div>\n              <div>\n                {[\n                  \"primary\",\n                  \"secondary\",\n                  \"success\",\n                  \"danger\",\n                  \"warning\",\n                  \"info\",\n                  \"light\",\n                  \"dark\"\n                ].map((variant, idx) => (\n                  <Alert key={idx} variant={variant}>\n                    This is a {variant} alert with &nbsp;\n                    <Alert.Link href=\"#\">an example link</Alert.Link>. Give it a\n                    click if you like.\n                  </Alert>\n                ))}\n              </div>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode5} beforeCodeTitle=\"Dismissing\">\n              <span>\n                You can also control the visual state directly which is great if\n                you want to build more complicated alerts.\n              </span>\n              <div className=\"separator separator-dashed my-7\"></div>\n              <AlertDismissible />\n            </KTCodeExample>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst jsCode1 = `\n[\n  'primary',\n  'secondary',\n  'success',\n  'danger',\n  'warning',\n  'info',\n  'light',\n  'dark',\n].map((variant, idx) => (\n  <Alert key={idx} variant={variant}>\n    This is a {variant} alert—check it out!\n  </Alert>\n));\n`;\nconst jsCode2 = `\n[\n  'primary',\n  'secondary',\n  'success',\n  'danger',\n  'warning',\n  'info',\n  'light',\n  'dark',\n].map((variant, idx) => (\n  <Alert key={idx} variant={variant}>\n    This is a {variant} alert with{' '}\n    <Alert.Link href=\"#\">an example link</Alert.Link>. Give it a click if you\n    like.\n  </Alert>\n));\n`;\nconst jsCode3 = `\n<Alert variant=\"success\">\n  <Alert.Heading>Hey, nice to see you</Alert.Heading>\n  <p>\n    Aww yeah, you successfully read this important alert message. This example\n    text is going to run a bit longer so that you can see how spacing within an\n    alert works with this kind of content.\n  </p>\n  <hr />\n  <p className=\"mb-0\">\n    Whenever you need to, be sure to use margin utilities to keep things nice\n    and tidy.\n  </p>\n</Alert>\n`;\nconst jsCode4 = `\nclass AlertDismissibleExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n  }\n\n  render() {\n    const handleDismiss = () => this.setState({ show: false });\n    const handleShow = () => this.setState({ show: true });\n    if (this.state.show) {\n      return (\n        <Alert variant=\"danger\" onClose={handleDismiss} dismissible>\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n          <p>\n            Change this and that and try again. Duis mollis, est non commodo\n            luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\n            Cras mattis consectetur purus sit amet fermentum.\n          </p>\n        </Alert>\n      );\n    }\n    return <Button onClick={handleShow}>Show Alert</Button>;\n  }\n}\n\nrender(<AlertDismissibleExample />);\n`;\nconst jsCode5 = `\nclass AlertDismissible extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { show: true };\n  }\n\n  render() {\n    const handleHide = () => this.setState({ show: false });\n    const handleShow = () => this.setState({ show: true });\n    return (\n      <>\n        <Alert show={this.state.show} variant=\"success\">\n          <Alert.Heading>How's it going?!</Alert.Heading>\n          <p>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula,\n            eget lacinia odio sem nec elit. Cras mattis consectetur purus sit\n            amet fermentum.\n          </p>\n          <hr />\n          <div className=\"d-flex justify-content-end\">\n            <Button onClick={handleHide} variant=\"outline-success\">\n              Close me ya'll!\n            </Button>\n          </div>\n        </Alert>\n\n        {!this.state.show && <Button onClick={handleShow}>Show Alert</Button>}\n      </>\n    );\n  }\n}\n\nrender(<AlertDismissible />);\n`;\n"]},"metadata":{},"sourceType":"module"}