{"ast":null,"code":"import _slicedToArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/_metronic/layout/_core/MetronicSubheader.js\";\nimport React, { createContext, useState, useContext } from \"react\";\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\n  var result = {\n    breadcrumbs: [],\n    title: \"\"\n  };\n  var menu = document.getElementById(menuId);\n\n  if (!menu) {\n    return result;\n  }\n\n  var activeLinksArray = Array.from(menu.getElementsByClassName(\"active\") || []);\n  var activeLinks = activeLinksArray.filter(function (el) {\n    return el.tagName === \"A\";\n  });\n\n  if (!activeLinks) {\n    return result;\n  }\n\n  activeLinks.forEach(function (link) {\n    var titleSpans = link.getElementsByClassName(\"menu-text\");\n\n    if (titleSpans) {\n      var titleSpan = Array.from(titleSpans).find(function (t) {\n        return t.innerHTML && t.innerHTML.trim().length > 0;\n      });\n\n      if (titleSpan) {\n        result.breadcrumbs.push({\n          pathname: link.pathname.replace(process.env.PUBLIC_URL, \"\"),\n          title: titleSpan.innerHTML\n        });\n      }\n    }\n  });\n  result.title = getTitle(result.breadcrumbs, pathName);\n  return result;\n}\nexport function getTitle(breadCrumbs, pathname) {\n  if (!breadCrumbs || !pathname) {\n    return \"\";\n  }\n\n  var length = breadCrumbs.length;\n\n  if (!length) {\n    return \"\";\n  }\n\n  return breadCrumbs[length - 1].title;\n}\nvar SubheaderContext = createContext();\nexport function useSubheader() {\n  return useContext(SubheaderContext);\n}\nexport var SubheaderConsumer = SubheaderContext.Consumer;\nexport function MetronicSubheaderProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      breadcrumbs = _useState4[0],\n      setBreadcrumbs = _useState4[1];\n\n  var value = {\n    title: title,\n    setTitle: setTitle,\n    breadcrumbs: breadcrumbs,\n    setBreadcrumbs: setBreadcrumbs\n  };\n  return /*#__PURE__*/React.createElement(SubheaderContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/_metronic/layout/_core/MetronicSubheader.js"],"names":["React","createContext","useState","useContext","getBreadcrumbsAndTitle","menuId","pathName","result","breadcrumbs","title","menu","document","getElementById","activeLinksArray","Array","from","getElementsByClassName","activeLinks","filter","el","tagName","forEach","link","titleSpans","titleSpan","find","t","innerHTML","trim","length","push","pathname","replace","process","env","PUBLIC_URL","getTitle","breadCrumbs","SubheaderContext","useSubheader","SubheaderConsumer","Consumer","MetronicSubheaderProvider","children","setTitle","setBreadcrumbs","value"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\n\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\n  const result = {\n    breadcrumbs: [],\n    title: \"\",\n  };\n\n  const menu = document.getElementById(menuId);\n  if (!menu) {\n    return result;\n  }\n\n  const activeLinksArray = Array.from(\n    menu.getElementsByClassName(\"active\") || []\n  );\n  const activeLinks = activeLinksArray.filter((el) => el.tagName === \"A\");\n  if (!activeLinks) {\n    return result;\n  }\n\n  activeLinks.forEach((link) => {\n    const titleSpans = link.getElementsByClassName(\"menu-text\");\n    if (titleSpans) {\n      const titleSpan = Array.from(titleSpans).find(\n        (t) => t.innerHTML && t.innerHTML.trim().length > 0\n      );\n      if (titleSpan) {\n        result.breadcrumbs.push({\n          pathname: link.pathname.replace(process.env.PUBLIC_URL, \"\"),\n          title: titleSpan.innerHTML,\n        });\n      }\n    }\n  });\n  result.title = getTitle(result.breadcrumbs, pathName);\n  return result;\n}\n\nexport function getTitle(breadCrumbs, pathname) {\n  if (!breadCrumbs || !pathname) {\n    return \"\";\n  }\n\n  const length = breadCrumbs.length;\n  if (!length) {\n    return \"\";\n  }\n\n  return breadCrumbs[length - 1].title;\n}\n\nconst SubheaderContext = createContext();\n\nexport function useSubheader() {\n  return useContext(SubheaderContext);\n}\n\nexport const SubheaderConsumer = SubheaderContext.Consumer;\n\nexport function MetronicSubheaderProvider({ children }) {\n  const [title, setTitle] = useState(\"\");\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const value = { title, setTitle, breadcrumbs, setBreadcrumbs };\n  return (\n    <SubheaderContext.Provider value={value}>\n      {children}\n    </SubheaderContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}