{"ast":null,"code":"import _classCallCheck from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/ReactBootstrapExamples/ButtonsExamplesPage.js\";\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport { Button, ButtonToolbar, ButtonGroup, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport { Notice, KTCodeExample } from \"../../../_metronic/_partials/controls\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n}\n\nvar LoadingButton = /*#__PURE__*/function (_React$Component) {\n  _inherits(LoadingButton, _React$Component);\n\n  var _super = _createSuper(LoadingButton);\n\n  function LoadingButton(props, context) {\n    var _this;\n\n    _classCallCheck(this, LoadingButton);\n\n    _this = _super.call(this, props, context);\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(LoadingButton, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      var _this2 = this;\n\n      this.setState({\n        isLoading: true\n      }, function () {\n        simulateNetworkRequest().then(function () {\n          _this2.setState({\n            isLoading: false\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        disabled: isLoading,\n        onClick: !isLoading ? this.handleClick : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }, isLoading ? \"Loadingâ€¦\" : \"Click to load\");\n    }\n  }]);\n\n  return LoadingButton;\n}(React.Component);\n\nvar ToggleButtonGroupControlled = /*#__PURE__*/function (_React$Component2) {\n  _inherits(ToggleButtonGroupControlled, _React$Component2);\n\n  var _super2 = _createSuper(ToggleButtonGroupControlled);\n\n  function ToggleButtonGroupControlled(props, context) {\n    var _this3;\n\n    _classCallCheck(this, ToggleButtonGroupControlled);\n\n    _this3 = _super2.call(this, props, context);\n    _this3.handleChange = _this3.handleChange.bind(_assertThisInitialized(_this3));\n    _this3.state = {\n      value: [1, 3]\n    };\n    return _this3;\n  }\n\n  _createClass(ToggleButtonGroupControlled, [{\n    key: \"handleChange\",\n    value: function handleChange(value, event) {\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n        type: \"checkbox\",\n        onChange: this.handleChange,\n        defaultValue: this.state.value,\n        name: \"toggleButtonGroup\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 1,\n        onChange: function onChange() {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, \"Option 1\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 2,\n        onChange: function onChange() {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, \"Option 2\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 3,\n        onChange: function onChange() {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, \"Option 3\"));\n    }\n  }]);\n\n  return ToggleButtonGroupControlled;\n}(React.Component);\n\nvar ButtonsExamplesPage = /*#__PURE__*/function (_React$Component3) {\n  _inherits(ButtonsExamplesPage, _React$Component3);\n\n  var _super3 = _createSuper(ButtonsExamplesPage);\n\n  function ButtonsExamplesPage() {\n    _classCallCheck(this, ButtonsExamplesPage);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(ButtonsExamplesPage, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n        icon: \"flaticon-warning font-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, \"Custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        className: \"font-weight-bold\",\n        rel: \"noopener noreferrer\",\n        href: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode1,\n        beforeCodeTitle: \"Examples\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }, \"Use any of the available button style types to quickly create a styled button. Just modify the \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 48\n        }\n      }, \"variant\"), \" prop.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }\n      }, \"Primary\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, \"Secondary\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }, \"Success\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, \"Warning\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }\n      }, \"Danger\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      }, \"Info\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }\n      }, \"Light\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"dark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }, \"Dark\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }\n      }, \"Link\"))))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode3,\n        beforeCodeTitle: \"Button tags\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }\n      }, \"Normally \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 26\n        }\n      }, \"<Button>\"), \" components will render a HTML \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 22\n        }\n      }, \"<button>\"), \" element. However you can render whatever you'd like, adding a \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 47\n        }\n      }, \"href\"), \" prop will automatically render an \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 41\n        }\n      }, \"<a />\"), \" element. You can use the \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }\n      }, \"as\"), \" prop to render whatever your heart desires. React Bootstrap will take care of the proper ARIA roles for you.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ButtonToolbar, {\n        className: \"pb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        href: \"#\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 19\n        }\n      }, \"Link\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }\n      }, \"Button\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        as: \"input\",\n        type: \"button\",\n        value: \"Input\",\n        onChange: function onChange() {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        as: \"input\",\n        type: \"submit\",\n        value: \"Submit\",\n        onChange: function onChange() {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        as: \"input\",\n        type: \"reset\",\n        value: \"Reset\",\n        onChange: function onChange() {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode5,\n        beforeCodeTitle: \"Sizes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }\n      }, \"Create block level buttons\\u2014those that span the full width of a parent\\u2014by adding block\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        block: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }\n      }, \"Block level button\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        block: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }\n      }, \"Block level button\"))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode7,\n        beforeCodeTitle: \"Disabled state\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }\n      }, \"Make buttons look inactive by adding the \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 58\n        }\n      }, \"disabled\"), \" \", \"prop to.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 19\n        }\n      }, \"Primary button\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 19\n        }\n      }, \"Button\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        href: \"#\",\n        variant: \"secondary\",\n        size: \"lg\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 19\n        }\n      }, \"Link\")))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode9,\n        beforeCodeTitle: \"Checkbox / Radio\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }\n      }, \"Button's can also be used to style \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 52\n        }\n      }, \"checkbox\"), \" and\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }\n      }, \"radio\"), \" form elements. This is helpful when you want a toggle button that works neatly inside an HTML form.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex flex-column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        toggle: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButton, {\n        type: \"checkbox\",\n        defaultChecked: true,\n        value: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 19\n        }\n      }, \"Checked\")), /*#__PURE__*/React.createElement(ButtonGroup, {\n        toggle: true,\n        className: \"mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        defaultChecked: true,\n        value: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 19\n        }\n      }, \"Active\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 19\n        }\n      }, \"Radio\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 19\n        }\n      }, \"Radio\")))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode11,\n        beforeCodeTitle: \"Controlled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButtonGroupControlled, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode2,\n        beforeCodeTitle: \"Outline buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }\n      }, \"For a lighter touch, Buttons also come in \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 59\n        }\n      }, \"outline-*\"), \" \", \"variants with no background color.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }\n      }, \"Primary\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }\n      }, \"Secondary\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }\n      }, \"Success\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-warning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }\n      }, \"Warning\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }\n      }, \"Danger\"))), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }\n      }, \"Info\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-dark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }\n      }, \"Dark\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 21\n        }\n      }, \"Light\"))))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode4,\n        beforeCodeTitle: \"Sizes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }\n      }, \"Fancy larger or smaller buttons? Add \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 54\n        }\n      }, \"size=\\\"lg\\\"\"), \",\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }\n      }, \"size=\\\"sm\\\"\"), \" for additional sizes.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 21\n        }\n      }, \"Large button\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }\n      }, \"Large button\")))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }\n      }, \"Small button\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }\n      }, \"Small button\"))))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode6,\n        beforeCodeTitle: \"Active state\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }\n      }, \"To set a buttons active state simply set the components\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 17\n        }\n      }, \"active\"), \" prop.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        active: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 19\n        }\n      }, \"Primary button\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pr-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        active: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 19\n        }\n      }, \"Button\")))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode8,\n        beforeCodeTitle: \"Button loading state\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 15\n        }\n      }, \"When activating an asynchronous action from a button it is a good UX pattern to give the user feedback as to the loading state, this can easily be done by updating your\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 17\n        }\n      }, \"<Button />\"), \"s props from a state change like below.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(LoadingButton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode10,\n        beforeCodeTitle: \"Uncontrolled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n        type: \"checkbox\",\n        defaultValue: [1, 3],\n        name: \"Uncontrolled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }\n      }, \"Checkbox 1 (pre-checked)\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 21\n        }\n      }, \"Checkbox 2\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 21\n        }\n      }, \"Checkbox 3 (pre-checked)\")))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n        type: \"radio\",\n        name: \"options\",\n        defaultValue: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 21\n        }\n      }, \"Radio 1 (pre-checked)\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 21\n        }\n      }, \"Radio 2\"), /*#__PURE__*/React.createElement(ToggleButton, {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }\n      }, \"Radio 3\"))))))));\n    }\n  }]);\n\n  return ButtonsExamplesPage;\n}(React.Component);\n\nexport { ButtonsExamplesPage as default };\nvar jsCode1 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"primary\\\">Primary</Button>\\n  <Button variant=\\\"secondary\\\">Secondary</Button>\\n  <Button variant=\\\"success\\\">Success</Button>\\n  <Button variant=\\\"warning\\\">Warning</Button>\\n  <Button variant=\\\"danger\\\">Danger</Button>\\n  <Button variant=\\\"info\\\">Info</Button>\\n  <Button variant=\\\"light\\\">Light</Button>\\n  <Button variant=\\\"dark\\\">Dark</Button>\\n  <Button variant=\\\"link\\\">Link</Button>\\n</ButtonToolbar>\\n\";\nvar jsCode2 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"outline-primary\\\">Primary</Button>\\n  <Button variant=\\\"outline-secondary\\\">Secondary</Button>\\n  <Button variant=\\\"outline-success\\\">Success</Button>\\n  <Button variant=\\\"outline-warning\\\">Warning</Button>\\n  <Button variant=\\\"outline-danger\\\">Danger</Button>\\n  <Button variant=\\\"outline-info\\\">Info</Button>\\n  <Button variant=\\\"outline-light\\\">Light</Button>\\n  <Button variant=\\\"outline-dark\\\">Dark</Button>\\n</ButtonToolbar>\\n\";\nvar jsCode3 = \"\\n<ButtonToolbar>\\n  <Button href=\\\"#\\\">Link</Button>\\n  <Button type=\\\"submit\\\">Button</Button>\\n  <Button as=\\\"input\\\" type=\\\"button\\\" value=\\\"Input\\\" />\\n  <Button as=\\\"input\\\" type=\\\"submit\\\" value=\\\"Submit\\\" />\\n  <Button as=\\\"input\\\" type=\\\"reset\\\" value=\\\"Reset\\\" />\\n</ButtonToolbar>\\n\";\nvar jsCode4 = \"\\n<div>\\n  <ButtonToolbar>\\n    <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>\\n    <Button variant=\\\"secondary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>\\n  </ButtonToolbar>\\n\\n  <ButtonToolbar>\\n    <Button variant=\\\"primary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>\\n    <Button variant=\\\"secondary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>\\n  </ButtonToolbar>\\n</div>\\n\";\nvar jsCode5 = \"\\n<div>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n</div>\\n\";\nvar jsCode6 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" active>\\n    Primary button\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" active>\\n    Button\\n  </Button>\\n</ButtonToolbar>\\n\";\nvar jsCode7 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" disabled>\\n    Primary button\\n  </Button>{' '}\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n    Button\\n  </Button>{' '}\\n  <Button href=\\\"#\\\" variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n    Link\\n  </Button>\\n</ButtonToolbar>\\n\";\nvar jsCode8 = \"\\nfunction simulateNetworkRequest() {\\n  return new Promise(resolve => setTimeout(resolve, 2000));\\n}\\n\\nclass LoadingButton extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.handleClick = this.handleClick.bind(this);\\n\\n    this.state = {\\n      isLoading: false,\\n    };\\n  }\\n\\n  handleClick() {\\n    this.setState({ isLoading: true }, () => {\\n      simulateNetworkRequest().then(() => {\\n        this.setState({ isLoading: false });\\n      });\\n    });\\n  }\\n\\n  render() {\\n    const { isLoading } = this.state;\\n\\n    return (\\n      <Button\\n        variant=\\\"primary\\\"\\n        disabled={isLoading}\\n        onClick={!isLoading ? this.handleClick : null}\\n      >\\n        {isLoading ? 'Loading\\u2026' : 'Click to load'}\\n      </Button>\\n    );\\n  }\\n}\\n\\nrender(<LoadingButton />);\\n\";\nvar jsCode9 = \"\\n<div className=\\\"d-flex flex-column\\\">\\n  <ButtonGroup toggle>\\n    <ToggleButton type=\\\"checkbox\\\" defaultChecked value=\\\"1\\\">\\n      Checked\\n    </ToggleButton>\\n  </ButtonGroup>\\n  <ButtonGroup toggle className=\\\"mt-3\\\">\\n    <ToggleButton type=\\\"radio\\\" name=\\\"radio\\\" defaultChecked value=\\\"1\\\">\\n      Active\\n    </ToggleButton>\\n    <ToggleButton type=\\\"radio\\\" name=\\\"radio\\\" value=\\\"2\\\">\\n      Radio\\n    </ToggleButton>\\n    <ToggleButton type=\\\"radio\\\" name=\\\"radio\\\" value=\\\"3\\\">\\n      Radio\\n    </ToggleButton>\\n  </ButtonGroup>\\n</div>\\n\";\nvar jsCode10 = \"\\n<>\\n  <ButtonToolbar>\\n    <ToggleButtonGroup type=\\\"checkbox\\\" defaultValue={[1, 3]}>\\n      <ToggleButton value={1}>Checkbox 1 (pre-checked)</ToggleButton>\\n      <ToggleButton value={2}>Checkbox 2</ToggleButton>\\n      <ToggleButton value={3}>Checkbox 3 (pre-checked)</ToggleButton>\\n    </ToggleButtonGroup>\\n  </ButtonToolbar>\\n\\n  <ButtonToolbar>\\n    <ToggleButtonGroup type=\\\"radio\\\" name=\\\"options\\\" defaultValue={1}>\\n      <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\\n      <ToggleButton value={2}>Radio 2</ToggleButton>\\n      <ToggleButton value={3}>Radio 3</ToggleButton>\\n    </ToggleButtonGroup>\\n  </ButtonToolbar>\\n</>\\n\";\nvar jsCode11 = \"\\nclass ToggleButtonGroupControlled extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.handleChange = this.handleChange.bind(this);\\n\\n    this.state = {\\n      value: [1, 3],\\n    };\\n  }\\n\\n  handleChange(value, event) {\\n    this.setState({ value });\\n  }\\n\\n  render() {\\n    return (\\n      <ToggleButtonGroup\\n        type=\\\"checkbox\\\"\\n        value={this.state.value}\\n        onChange={this.handleChange}\\n      >\\n        <ToggleButton value={1}>Option 1</ToggleButton>\\n        <ToggleButton value={2}>Option 2</ToggleButton>\\n        <ToggleButton value={3}>Option 3</ToggleButton>\\n      </ToggleButtonGroup>\\n    );\\n  }\\n}\\n\\nrender(<ToggleButtonGroupControlled />);\\n\";","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ReactBootstrapExamples/ButtonsExamplesPage.js"],"names":["React","Button","ButtonToolbar","ButtonGroup","ToggleButton","ToggleButtonGroup","Notice","KTCodeExample","simulateNetworkRequest","Promise","resolve","setTimeout","LoadingButton","props","context","handleClick","bind","state","isLoading","setState","then","Component","ToggleButtonGroupControlled","handleChange","value","event","ButtonsExamplesPage","jsCode1","jsCode3","jsCode5","jsCode7","jsCode9","jsCode11","jsCode2","jsCode4","jsCode6","jsCode8","jsCode10"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport {\n  Button,\n  ButtonToolbar,\n  ButtonGroup,\n  ToggleButton,\n  ToggleButtonGroup\n} from \"react-bootstrap\";\nimport {Notice, KTCodeExample} from \"../../../_metronic/_partials/controls\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nclass LoadingButton extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      isLoading: false\n    };\n  }\n\n  handleClick() {\n    this.setState({ isLoading: true }, () => {\n      simulateNetworkRequest().then(() => {\n        this.setState({ isLoading: false });\n      });\n    });\n  }\n\n  render() {\n    const { isLoading } = this.state;\n\n    return (\n      <Button\n        variant=\"primary\"\n        disabled={isLoading}\n        onClick={!isLoading ? this.handleClick : null}\n      >\n        {isLoading ? \"Loadingâ€¦\" : \"Click to load\"}\n      </Button>\n    );\n  }\n}\n\nclass ToggleButtonGroupControlled extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: [1, 3]\n    };\n  }\n\n  handleChange(value, event) {\n    this.setState({ value });\n  }\n\n  render() {\n    return (\n      <ToggleButtonGroup\n        type=\"checkbox\"\n        onChange={this.handleChange}\n        defaultValue={this.state.value}\n        name=\"toggleButtonGroup\"\n      >\n        <ToggleButton value={1} onChange={() => {}}>\n          Option 1\n        </ToggleButton>\n        <ToggleButton value={2} onChange={() => {}}>\n          Option 2\n        </ToggleButton>\n        <ToggleButton value={3} onChange={() => {}}>\n          Option 3\n        </ToggleButton>\n      </ToggleButtonGroup>\n    );\n  }\n}\n\nexport default class ButtonsExamplesPage extends React.Component {\n  render() {\n    return (\n      <>\n        <Notice icon=\"flaticon-warning font-primary\">\n          <span>\n            Custom button styles for actions in forms, dialogs, and more with\n            support for multiple sizes, states, and more.\n          </span>{\" \"}\n          <span>\n            For more info please check the components's official{\" \"}\n            <a\n              target=\"_blank\"\n              className=\"font-weight-bold\"\n              rel=\"noopener noreferrer\"\n              href=\"\"\n            >\n              demos & documentation\n            </a>\n          </span>\n        </Notice>\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <KTCodeExample jsCode={jsCode1} beforeCodeTitle=\"Examples\">\n              <span>\n                Use any of the available button style types to quickly create a\n                styled button. Just modify the <code>variant</code> prop.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <ButtonToolbar>\n                <div className=\"mb-3\">\n                  <span className=\"pr-4\">\n                    <Button variant=\"primary\">Primary</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"secondary\">Secondary</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"success\">Success</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"warning\">Warning</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"danger\">Danger</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"info\">Info</Button>\n                  </span>\n                </div>\n                <div>\n                  <span className=\"pr-4\">\n                    <Button variant=\"light\">Light</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"dark\">Dark</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"link\">Link</Button>\n                  </span>\n                </div>\n              </ButtonToolbar>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode3} beforeCodeTitle=\"Button tags\">\n              <span>\n                Normally <code>&lt;Button&gt;</code> components will render a\n                HTML <code>&lt;button&gt;</code> element. However you can render\n                whatever you'd like, adding a <code>href</code> prop will\n                automatically render an <code>&lt;a /&gt;</code> element. You\n                can use the <code>as</code> prop to render whatever your heart\n                desires. React Bootstrap will take care of the proper ARIA roles\n                for you.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <ButtonToolbar className=\"pb-2\">\n                <span className=\"pr-1\">\n                  <Button href=\"#\">Link</Button>\n                </span>\n                <span className=\"pr-1\">\n                  <Button type=\"submit\">Button</Button>\n                </span>\n                <span className=\"pr-1\">\n                  <Button\n                    as=\"input\"\n                    type=\"button\"\n                    value=\"Input\"\n                    onChange={() => {}}\n                  />\n                </span>\n              </ButtonToolbar>\n              <ButtonToolbar>\n                <span className=\"pr-1\">\n                  <Button\n                    as=\"input\"\n                    type=\"submit\"\n                    value=\"Submit\"\n                    onChange={() => {}}\n                  />\n                </span>\n                <span className=\"pr-1\">\n                  <Button\n                    as=\"input\"\n                    type=\"reset\"\n                    value=\"Reset\"\n                    onChange={() => {}}\n                  />\n                </span>\n              </ButtonToolbar>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode5} beforeCodeTitle=\"Sizes\">\n              <span>\n                Create block level buttonsâ€”those that span the full width of a\n                parentâ€”by adding block\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <div>\n                <Button variant=\"primary\" size=\"lg\" block>\n                  Block level button\n                </Button>\n                <Button variant=\"secondary\" size=\"lg\" block>\n                  Block level button\n                </Button>\n              </div>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode7} beforeCodeTitle=\"Disabled state\">\n              <span>\n                Make buttons look inactive by adding the <code>disabled</code>{\" \"}\n                prop to.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <ButtonToolbar>\n                <span className=\"pr-4\">\n                  <Button variant=\"primary\" size=\"lg\" disabled>\n                    Primary button\n                  </Button>\n                </span>\n                <span className=\"pr-4\">\n                  <Button variant=\"secondary\" size=\"lg\" disabled>\n                    Button\n                  </Button>\n                </span>\n                <span className=\"pr-4\">\n                  <Button href=\"#\" variant=\"secondary\" size=\"lg\" disabled>\n                    Link\n                  </Button>\n                </span>\n              </ButtonToolbar>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode9} beforeCodeTitle=\"Checkbox / Radio\">\n              <span>\n                Button's can also be used to style <code>checkbox</code> and{\" \"}\n                <code>radio</code> form elements. This is helpful when you want\n                a toggle button that works neatly inside an HTML form.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <div className=\"d-flex flex-column\">\n                <ButtonGroup toggle>\n                  <ToggleButton type=\"checkbox\" defaultChecked value=\"1\">\n                    Checked\n                  </ToggleButton>\n                </ButtonGroup>\n                <ButtonGroup toggle className=\"mt-3\">\n                  <ToggleButton\n                    type=\"radio\"\n                    name=\"radio\"\n                    defaultChecked\n                    value=\"1\"\n                  >\n                    Active\n                  </ToggleButton>\n                  <ToggleButton type=\"radio\" name=\"radio\" value=\"2\">\n                    Radio\n                  </ToggleButton>\n                  <ToggleButton type=\"radio\" name=\"radio\" value=\"3\">\n                    Radio\n                  </ToggleButton>\n                </ButtonGroup>\n              </div>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode11} beforeCodeTitle=\"Controlled\">\n              <ToggleButtonGroupControlled />\n            </KTCodeExample>\n          </div>\n          <div className=\"col-md-6\">\n            <KTCodeExample jsCode={jsCode2} beforeCodeTitle=\"Outline buttons\">\n              <span>\n                For a lighter touch, Buttons also come in <code>outline-*</code>{\" \"}\n                variants with no background color.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <ButtonToolbar>\n                <p>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-primary\">Primary</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-secondary\">Secondary</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-success\">Success</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-warning\">Warning</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-danger\">Danger</Button>\n                  </span>\n                </p>\n                <p>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-info\">Info</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-dark\">Dark</Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"outline-light\">Light</Button>\n                  </span>\n                </p>\n              </ButtonToolbar>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode4} beforeCodeTitle=\"Sizes\">\n              <span>\n                Fancy larger or smaller buttons? Add <code>size=\"lg\"</code>,{\" \"}\n                <code>size=\"sm\"</code> for additional sizes.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <div className=\"mb-3\">\n                <ButtonToolbar>\n                  <span className=\"pr-4\">\n                    <Button variant=\"primary\" size=\"lg\">\n                      Large button\n                    </Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"secondary\" size=\"lg\">\n                      Large button\n                    </Button>\n                  </span>\n                </ButtonToolbar>\n              </div>\n              <div>\n                <ButtonToolbar>\n                  <span className=\"pr-4\">\n                    <Button variant=\"primary\" size=\"sm\">\n                      Small button\n                    </Button>\n                  </span>\n                  <span className=\"pr-4\">\n                    <Button variant=\"secondary\" size=\"sm\">\n                      Small button\n                    </Button>\n                  </span>\n                </ButtonToolbar>\n              </div>\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode6} beforeCodeTitle=\"Active state\">\n              <span>\n                To set a buttons active state simply set the components{\" \"}\n                <code>active</code> prop.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <ButtonToolbar>\n                <span className=\"pr-4\">\n                  <Button variant=\"primary\" size=\"lg\" active>\n                    Primary button\n                  </Button>\n                </span>\n                <span className=\"pr-4\">\n                  <Button variant=\"secondary\" size=\"lg\" active>\n                    Button\n                  </Button>\n                </span>\n              </ButtonToolbar>\n            </KTCodeExample>\n\n            <KTCodeExample\n              jsCode={jsCode8}\n              beforeCodeTitle=\"Button loading state\"\n            >\n              <span>\n                When activating an asynchronous action from a button it is a\n                good UX pattern to give the user feedback as to the loading\n                state, this can easily be done by updating your{\" \"}\n                <code>&lt;Button /&gt;</code>s props from a state change like\n                below.\n              </span>\n              <div className=\"separator separator-dashed my-7\" />\n              <LoadingButton />\n            </KTCodeExample>\n\n            <KTCodeExample jsCode={jsCode10} beforeCodeTitle=\"Uncontrolled\">\n              <div className=\"mb-3\">\n                <ButtonToolbar>\n                  <ToggleButtonGroup\n                    type=\"checkbox\"\n                    defaultValue={[1, 3]}\n                    name=\"Uncontrolled\"\n                  >\n                    <ToggleButton value={1}>\n                      Checkbox 1 (pre-checked)\n                    </ToggleButton>\n                    <ToggleButton value={2}>Checkbox 2</ToggleButton>\n                    <ToggleButton value={3}>\n                      Checkbox 3 (pre-checked)\n                    </ToggleButton>\n                  </ToggleButtonGroup>\n                </ButtonToolbar>\n              </div>\n              <div>\n                <ButtonToolbar>\n                  <ToggleButtonGroup\n                    type=\"radio\"\n                    name=\"options\"\n                    defaultValue={1}\n                  >\n                    <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\n                    <ToggleButton value={2}>Radio 2</ToggleButton>\n                    <ToggleButton value={3}>Radio 3</ToggleButton>\n                  </ToggleButtonGroup>\n                </ButtonToolbar>\n              </div>\n            </KTCodeExample>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst jsCode1 = `\n<ButtonToolbar>\n  <Button variant=\"primary\">Primary</Button>\n  <Button variant=\"secondary\">Secondary</Button>\n  <Button variant=\"success\">Success</Button>\n  <Button variant=\"warning\">Warning</Button>\n  <Button variant=\"danger\">Danger</Button>\n  <Button variant=\"info\">Info</Button>\n  <Button variant=\"light\">Light</Button>\n  <Button variant=\"dark\">Dark</Button>\n  <Button variant=\"link\">Link</Button>\n</ButtonToolbar>\n`;\nconst jsCode2 = `\n<ButtonToolbar>\n  <Button variant=\"outline-primary\">Primary</Button>\n  <Button variant=\"outline-secondary\">Secondary</Button>\n  <Button variant=\"outline-success\">Success</Button>\n  <Button variant=\"outline-warning\">Warning</Button>\n  <Button variant=\"outline-danger\">Danger</Button>\n  <Button variant=\"outline-info\">Info</Button>\n  <Button variant=\"outline-light\">Light</Button>\n  <Button variant=\"outline-dark\">Dark</Button>\n</ButtonToolbar>\n`;\nconst jsCode3 = `\n<ButtonToolbar>\n  <Button href=\"#\">Link</Button>\n  <Button type=\"submit\">Button</Button>\n  <Button as=\"input\" type=\"button\" value=\"Input\" />\n  <Button as=\"input\" type=\"submit\" value=\"Submit\" />\n  <Button as=\"input\" type=\"reset\" value=\"Reset\" />\n</ButtonToolbar>\n`;\nconst jsCode4 = `\n<div>\n  <ButtonToolbar>\n    <Button variant=\"primary\" size=\"lg\">\n      Large button\n    </Button>\n    <Button variant=\"secondary\" size=\"lg\">\n      Large button\n    </Button>\n  </ButtonToolbar>\n\n  <ButtonToolbar>\n    <Button variant=\"primary\" size=\"sm\">\n      Small button\n    </Button>\n    <Button variant=\"secondary\" size=\"sm\">\n      Small button\n    </Button>\n  </ButtonToolbar>\n</div>\n`;\nconst jsCode5 = `\n<div>\n  <Button variant=\"primary\" size=\"lg\" block>\n    Block level button\n  </Button>\n  <Button variant=\"secondary\" size=\"lg\" block>\n    Block level button\n  </Button>\n</div>\n`;\nconst jsCode6 = `\n<ButtonToolbar>\n  <Button variant=\"primary\" size=\"lg\" active>\n    Primary button\n  </Button>\n  <Button variant=\"secondary\" size=\"lg\" active>\n    Button\n  </Button>\n</ButtonToolbar>\n`;\nconst jsCode7 = `\n<ButtonToolbar>\n  <Button variant=\"primary\" size=\"lg\" disabled>\n    Primary button\n  </Button>{' '}\n  <Button variant=\"secondary\" size=\"lg\" disabled>\n    Button\n  </Button>{' '}\n  <Button href=\"#\" variant=\"secondary\" size=\"lg\" disabled>\n    Link\n  </Button>\n</ButtonToolbar>\n`;\nconst jsCode8 = `\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nclass LoadingButton extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  handleClick() {\n    this.setState({ isLoading: true }, () => {\n      simulateNetworkRequest().then(() => {\n        this.setState({ isLoading: false });\n      });\n    });\n  }\n\n  render() {\n    const { isLoading } = this.state;\n\n    return (\n      <Button\n        variant=\"primary\"\n        disabled={isLoading}\n        onClick={!isLoading ? this.handleClick : null}\n      >\n        {isLoading ? 'Loadingâ€¦' : 'Click to load'}\n      </Button>\n    );\n  }\n}\n\nrender(<LoadingButton />);\n`;\nconst jsCode9 = `\n<div className=\"d-flex flex-column\">\n  <ButtonGroup toggle>\n    <ToggleButton type=\"checkbox\" defaultChecked value=\"1\">\n      Checked\n    </ToggleButton>\n  </ButtonGroup>\n  <ButtonGroup toggle className=\"mt-3\">\n    <ToggleButton type=\"radio\" name=\"radio\" defaultChecked value=\"1\">\n      Active\n    </ToggleButton>\n    <ToggleButton type=\"radio\" name=\"radio\" value=\"2\">\n      Radio\n    </ToggleButton>\n    <ToggleButton type=\"radio\" name=\"radio\" value=\"3\">\n      Radio\n    </ToggleButton>\n  </ButtonGroup>\n</div>\n`;\nconst jsCode10 = `\n<>\n  <ButtonToolbar>\n    <ToggleButtonGroup type=\"checkbox\" defaultValue={[1, 3]}>\n      <ToggleButton value={1}>Checkbox 1 (pre-checked)</ToggleButton>\n      <ToggleButton value={2}>Checkbox 2</ToggleButton>\n      <ToggleButton value={3}>Checkbox 3 (pre-checked)</ToggleButton>\n    </ToggleButtonGroup>\n  </ButtonToolbar>\n\n  <ButtonToolbar>\n    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={1}>\n      <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\n      <ToggleButton value={2}>Radio 2</ToggleButton>\n      <ToggleButton value={3}>Radio 3</ToggleButton>\n    </ToggleButtonGroup>\n  </ButtonToolbar>\n</>\n`;\nconst jsCode11 = `\nclass ToggleButtonGroupControlled extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: [1, 3],\n    };\n  }\n\n  handleChange(value, event) {\n    this.setState({ value });\n  }\n\n  render() {\n    return (\n      <ToggleButtonGroup\n        type=\"checkbox\"\n        value={this.state.value}\n        onChange={this.handleChange}\n      >\n        <ToggleButton value={1}>Option 1</ToggleButton>\n        <ToggleButton value={2}>Option 2</ToggleButton>\n        <ToggleButton value={3}>Option 3</ToggleButton>\n      </ToggleButtonGroup>\n    );\n  }\n}\n\nrender(<ToggleButtonGroupControlled />);\n`;\n"]},"metadata":{},"sourceType":"module"}