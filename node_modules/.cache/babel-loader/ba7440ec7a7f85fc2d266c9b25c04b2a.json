{"ast":null,"code":"import _slicedToArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/_metronic/_partials/controls/code-examples/CodeBlockToolbar.js\";\nimport React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport copy from \"clipboard-copy\";\nimport { Tooltip } from \"@material-ui/core\";\nexport function CodeBlockToolbar(_ref) {\n  var _ref$showViewCode = _ref.showViewCode,\n      showViewCode = _ref$showViewCode === void 0 ? false : _ref$showViewCode,\n      code = _ref.code,\n      isCodeBlockShown = _ref.isCodeBlockShown,\n      setIsCodeBlockShown = _ref.setIsCodeBlockShown;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCopySucceed = _useState2[0],\n      setIsCopySucceed = _useState2[1];\n\n  var copyCode = function copyCode() {\n    copy(code).then(function () {\n      setIsCopySucceed(true);\n      setTimeout(function () {\n        setIsCopySucceed(false);\n      }, 2000);\n    });\n  };\n\n  var toggleShowCode = function toggleShowCode() {\n    setIsCodeBlockShown(!isCodeBlockShown);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, showViewCode && /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"\".concat(isCodeBlockShown ? \"\" : \"View code\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"example-toggle \".concat(clsx({\n      \"example-toggled\": isCodeBlockShown\n    })),\n    onClick: toggleShowCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Copy code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"example-copy \".concat(clsx({\n      \"example-copied\": isCopySucceed\n    })),\n    onClick: copyCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/_metronic/_partials/controls/code-examples/CodeBlockToolbar.js"],"names":["React","useState","clsx","copy","Tooltip","CodeBlockToolbar","showViewCode","code","isCodeBlockShown","setIsCodeBlockShown","isCopySucceed","setIsCopySucceed","copyCode","then","setTimeout","toggleShowCode"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AAEA,OAAO,SAASC,gBAAT,OAKJ;AAAA,+BAJDC,YAIC;AAAA,MAJDA,YAIC,kCAJc,KAId;AAAA,MAHDC,IAGC,QAHDA,IAGC;AAAA,MAFDC,gBAEC,QAFDA,gBAEC;AAAA,MADDC,mBACC,QADDA,mBACC;;AACD,kBAA0CR,QAAQ,CAAC,KAAD,CAAlD;AAAA;AAAA,MAAOS,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBT,IAAAA,IAAI,CAACI,IAAD,CAAJ,CAAWM,IAAX,CAAgB,YAAM;AACpBF,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAG,MAAAA,UAAU,CAAC,YAAM;AACfH,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KALD;AAMD,GAPD;;AASA,MAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BN,IAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACD,GAFD;;AAIA,sBACE,0CACGF,YAAY,iBACX,oBAAC,OAAD;AAAS,IAAA,KAAK,YAAKE,gBAAgB,GAAG,EAAH,GAAQ,WAA7B,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,2BAAoBN,IAAI,CAAC;AAChC,yBAAmBM;AADa,KAAD,CAAxB,CADX;AAIE,IAAA,OAAO,EAAEO,cAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,eAWE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,yBAAkBb,IAAI,CAAC;AAC9B,wBAAkBQ;AADY,KAAD,CAAtB,CADX;AAIE,IAAA,OAAO,EAAEE,QAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAXF,CADF;AAsBD","sourcesContent":["import React, {useState} from \"react\";\nimport clsx from \"clsx\";\nimport copy from \"clipboard-copy\";\nimport {Tooltip} from \"@material-ui/core\";\n\nexport function CodeBlockToolbar({\n  showViewCode = false,\n  code,\n  isCodeBlockShown,\n  setIsCodeBlockShown\n}) {\n  const [isCopySucceed, setIsCopySucceed] = useState(false);\n  const copyCode = () => {\n    copy(code).then(() => {\n      setIsCopySucceed(true);\n      setTimeout(() => {\n        setIsCopySucceed(false);\n      }, 2000);\n    });\n  };\n\n  const toggleShowCode = () => {\n    setIsCodeBlockShown(!isCodeBlockShown);\n  };\n\n  return (\n    <>\n      {showViewCode && (\n        <Tooltip title={`${isCodeBlockShown ? \"\" : \"View code\"}`}>\n          <span\n            className={`example-toggle ${clsx({\n              \"example-toggled\": isCodeBlockShown\n            })}`}\n            onClick={toggleShowCode}\n          />\n        </Tooltip>\n      )}\n      <Tooltip title=\"Copy code\">\n        <span\n          className={`example-copy ${clsx({\n            \"example-copied\": isCopySucceed\n          })}`}\n          onClick={copyCode}\n        />\n      </Tooltip>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}