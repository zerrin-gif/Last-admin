{"ast":null,"code":"var _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/GoogleMaterialExamples/layout/GridListExamplesPage.js\";\n\n/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\nimport { GridList, GridListTile, ListSubheader, GridListTileBar, IconButton } from \"@material-ui/core\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\";\nvar tileData = [{\n  img: \"https://material-ui.com/static/images/grid-list/breakfast.jpg\",\n  title: \"Breakfast\",\n  author: \"jill111\",\n  cols: 2,\n  featured: true\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/burgers.jpg\",\n  title: \"Tasty burger\",\n  author: \"director90\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/camera.jpg\",\n  title: \"Camera\",\n  author: \"Danson67\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/morning.jpg\",\n  title: \"Morning\",\n  author: \"fancycrave1\",\n  featured: true\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/hats.jpg\",\n  title: \"Hats\",\n  author: \"Hans\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/honey.jpg\",\n  title: \"Honey\",\n  author: \"fancycravel\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/vegetables.jpg\",\n  title: \"Vegetables\",\n  author: \"jill111\",\n  cols: 2\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/plant.jpg\",\n  title: \"Water plant\",\n  author: \"BkrmadtyaKarki\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/mushroom.jpg\",\n  title: \"Mushrooms\",\n  author: \"PublicDomainPictures\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/olive.jpg\",\n  title: \"Olive oil\",\n  author: \"congerdesign\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/star.jpg\",\n  title: \"Sea star\",\n  cols: 2,\n  author: \"821292\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/bike.jpg\",\n  title: \"Bike\",\n  author: \"danfador\"\n}];\nvar jsCode1 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    width: 500,\\n    height: 450,\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *     cols: 2,\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function ImageGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img} cols={tile.cols || 1}>\\n            <img src={tile.img} alt={tile.title} />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\\nimport ListSubheader from '@material-ui/core/ListSubheader';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport InfoIcon from '@material-ui/icons/Info';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    width: 500,\\n    height: 450,\\n  },\\n  icon: {\\n    color: 'rgba(255, 255, 255, 0.54)',\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function TitlebarGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList cellHeight={180} className={classes.gridList}>\\n        <GridListTile key=\\\"Subheader\\\" cols={2} style={{ height: 'auto' }}>\\n          <ListSubheader component=\\\"div\\\">December</ListSubheader>\\n        </GridListTile>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img}>\\n            <img src={tile.img} alt={tile.title} />\\n            <GridListTileBar\\n              title={tile.title}\\n              subtitle={<span>by: {tile.author}</span>}\\n              actionIcon={\\n                <IconButton aria-label={`info about ${tile.title}`} className={classes.icon}>\\n                  <InfoIcon />\\n                </IconButton>\\n              }\\n            />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode3 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    flexWrap: 'nowrap',\\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\\n    transform: 'translateZ(0)',\\n  },\\n  title: {\\n    color: theme.palette.primary.light,\\n  },\\n  titleBar: {\\n    background:\\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function SingleLineGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList className={classes.gridList} cols={2.5}>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img}>\\n            <img src={tile.img} alt={tile.title} />\\n            <GridListTileBar\\n              title={tile.title}\\n              classes={{\\n                root: classes.titleBar,\\n                title: classes.title,\\n              }}\\n              actionIcon={\\n                <IconButton aria-label={`star ${tile.title}`}>\\n                  <StarBorderIcon className={classes.title} />\\n                </IconButton>\\n              }\\n            />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode4 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    width: 500,\\n    height: 450,\\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\\n    transform: 'translateZ(0)',\\n  },\\n  titleBar: {\\n    background:\\n      'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\\n      'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\\n  },\\n  icon: {\\n    color: 'white',\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *     featured: true,\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function AdvancedGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList cellHeight={200} spacing={1} className={classes.gridList}>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img} cols={tile.featured ? 2 : 1} rows={tile.featured ? 2 : 1}>\\n            <img src={tile.img} alt={tile.title} />\\n            <GridListTileBar\\n              title={tile.title}\\n              titlePosition=\\\"top\\\"\\n              actionIcon={\\n                <IconButton aria-label={`star ${tile.title}`} className={classes.icon}>\\n                  <StarBorderIcon />\\n                </IconButton>\\n              }\\n              actionPosition=\\\"left\\\"\\n              className={classes.titleBar}\\n            />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      width: 500,\n      height: 450\n    },\n    icon: {\n      color: \"rgba(255, 255, 255, 0.54)\"\n    }\n  };\n});\nvar useStyles3 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      flexWrap: \"nowrap\",\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: \"translateZ(0)\"\n    },\n    title: {\n      color: theme.palette.primary.light\n    },\n    titleBar: {\n      background: \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n    }\n  };\n});\nvar useStyles4 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      width: 1200,\n      height: 450,\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: \"translateZ(0)\"\n    },\n    titleBar: {\n      background: \"linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, \" + \"rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n    },\n    icon: {\n      color: \"white\"\n    }\n  };\n});\nexport default function GridListExamplesPage() {\n  var _this = this;\n\n  var classes = useStyles();\n  var classes3 = useStyles3();\n  var classes4 = useStyles4();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 9\n    }\n  }, \"Grid lists display a collection of images in an organized grid.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/grid-list/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Image-only grid list\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }\n  }, \"A simple example of a scrollable image \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 54\n    }\n  }, \"GridList\"), \" .\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 160,\n    className: classes.gridList,\n    cols: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 15\n    }\n  }, tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      cols: tile.cols || 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 21\n      }\n    }));\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"Grid list with titlebars\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 13\n    }\n  }, \"This example demonstrates the use of the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 15\n    }\n  }, \"GridListTileBar\"), \" to add an overlay to each\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 15\n    }\n  }, \"GridListTile\"), \". The overlay can accommodate a\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 15\n    }\n  }, \"title\"), \", \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 35\n    }\n  }, \"subtitle\"), \" and secondary action - in this example an \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 34\n    }\n  }, \"IconButton\"), \".\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 180,\n    className: classes.gridList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(GridListTile, {\n    key: \"Subheader\",\n    cols: 2,\n    style: {\n      height: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 19\n    }\n  }, \"December\")), tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(GridListTileBar, {\n      title: tile.title,\n      subtitle: /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 33\n        }\n      }, \"by: \", tile.author),\n      actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"info about \".concat(tile.title),\n        className: classes.icon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"flaticon-information\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 27\n        }\n      })),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 21\n      }\n    }));\n  })))))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode3,\n    beforeCodeTitle: \"Single line Grid list\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 9\n    }\n  }, \"This example demonstrates a horizontal scrollable single-line grid list of images. Horizontally scrolling grid lists are discouraged because the scrolling interferes with typical reading patterns, affecting comprehension. One notable exception is a horizontally-scrolling, single-line grid list of images, such as a gallery.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes3.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    className: classes3.gridList,\n    cols: 2.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 11\n    }\n  }, tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(GridListTileBar, {\n      title: tile.title,\n      classes: {\n        root: classes3.titleBar,\n        title: classes3.title\n      },\n      actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"star \".concat(tile.title),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"flaticon-star\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 23\n        }\n      })),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }\n    }));\n  })))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode4,\n    beforeCodeTitle: \"Advanced Grid list\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 9\n    }\n  }, \"This example demonstrates \\\"featured\\\" tiles, using the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 11\n    }\n  }, \"rows\"), \" and \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 33\n    }\n  }, \"cols\"), \" props to adjust the size of the tile, and the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 29\n    }\n  }, \"padding\"), \" prop to adjust the spacing. The tiles have a customized titlebar, positioned at the top and with a custom gradient \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 27\n    }\n  }, \"titleBackground\"), \". The secondary action\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 11\n    }\n  }, \"IconButton\"), \" is positioned on the left.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes4.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 200,\n    spacing: 1,\n    className: classes4.gridList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 11\n    }\n  }, tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      cols: tile.featured ? 2 : 1,\n      rows: tile.featured ? 2 : 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(GridListTileBar, {\n      title: tile.title,\n      titlePosition: \"top\",\n      actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"star \".concat(tile.title),\n        className: classes4.icon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(StarBorderIcon, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 23\n        }\n      })),\n      actionPosition: \"left\",\n      className: classes4.titleBar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 17\n      }\n    }));\n  })))));\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/GoogleMaterialExamples/layout/GridListExamplesPage.js"],"names":["React","makeStyles","StarBorderIcon","GridList","GridListTile","ListSubheader","GridListTileBar","IconButton","Notice","KTCodeExample","tileData","img","title","author","cols","featured","jsCode1","jsCode2","jsCode3","jsCode4","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","useStyles3","transform","primary","light","titleBar","useStyles4","GridListExamplesPage","classes","classes3","classes4","map","tile"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\nimport {\n  GridList,\n  GridListTile,\n  ListSubheader,\n  GridListTileBar,\n  IconButton\n} from \"@material-ui/core\";\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\n\nconst tileData = [\n  {\n    img: \"https://material-ui.com/static/images/grid-list/breakfast.jpg\",\n    title: \"Breakfast\",\n    author: \"jill111\",\n    cols: 2,\n    featured: true\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/burgers.jpg\",\n    title: \"Tasty burger\",\n    author: \"director90\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/camera.jpg\",\n    title: \"Camera\",\n    author: \"Danson67\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/morning.jpg\",\n    title: \"Morning\",\n    author: \"fancycrave1\",\n    featured: true\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/hats.jpg\",\n    title: \"Hats\",\n    author: \"Hans\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/honey.jpg\",\n    title: \"Honey\",\n    author: \"fancycravel\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/vegetables.jpg\",\n    title: \"Vegetables\",\n    author: \"jill111\",\n    cols: 2\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/plant.jpg\",\n    title: \"Water plant\",\n    author: \"BkrmadtyaKarki\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/mushroom.jpg\",\n    title: \"Mushrooms\",\n    author: \"PublicDomainPictures\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/olive.jpg\",\n    title: \"Olive oil\",\n    author: \"congerdesign\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/star.jpg\",\n    title: \"Sea star\",\n    cols: 2,\n    author: \"821292\"\n  },\n  {\n    img: \"https://material-ui.com/static/images/grid-list/bike.jpg\",\n    title: \"Bike\",\n    author: \"danfador\"\n  }\n];\nconst jsCode1 = `\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport tileData from './tileData';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 500,\n    height: 450,\n  },\n}));\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *     cols: 2,\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\nexport default function ImageGridList() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\n        {tileData.map(tile => (\n          <GridListTile key={tile.img} cols={tile.cols || 1}>\n            <img src={tile.img} alt={tile.title} />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n`;\nconst jsCode2 = `\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport tileData from './tileData';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 500,\n    height: 450,\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\nexport default function TitlebarGridList() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={180} className={classes.gridList}>\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n          <ListSubheader component=\"div\">December</ListSubheader>\n        </GridListTile>\n        {tileData.map(tile => (\n          <GridListTile key={tile.img}>\n            <img src={tile.img} alt={tile.title} />\n            <GridListTileBar\n              title={tile.title}\n              subtitle={<span>by: {tile.author}</span>}\n              actionIcon={\n                <IconButton aria-label={\\`info about \\${tile.title}\\`} className={classes.icon}>\n                  <InfoIcon />\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n`;\nconst jsCode3 = `\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport tileData from './tileData';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n  title: {\n    color: theme.palette.primary.light,\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n  },\n}));\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\nexport default function SingleLineGridList() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList className={classes.gridList} cols={2.5}>\n        {tileData.map(tile => (\n          <GridListTile key={tile.img}>\n            <img src={tile.img} alt={tile.title} />\n            <GridListTileBar\n              title={tile.title}\n              classes={{\n                root: classes.titleBar,\n                title: classes.title,\n              }}\n              actionIcon={\n                <IconButton aria-label={\\`star \\${tile.title}\\`}>\n                  <StarBorderIcon className={classes.title} />\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n`;\nconst jsCode4 = `\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport tileData from './tileData';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 500,\n    height: 450,\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n      'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n  },\n  icon: {\n    color: 'white',\n  },\n}));\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *     featured: true,\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\nexport default function AdvancedGridList() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={200} spacing={1} className={classes.gridList}>\n        {tileData.map(tile => (\n          <GridListTile key={tile.img} cols={tile.featured ? 2 : 1} rows={tile.featured ? 2 : 1}>\n            <img src={tile.img} alt={tile.title} />\n            <GridListTileBar\n              title={tile.title}\n              titlePosition=\"top\"\n              actionIcon={\n                <IconButton aria-label={\\`star \\${tile.title}\\`} className={classes.icon}>\n                  <StarBorderIcon />\n                </IconButton>\n              }\n              actionPosition=\"left\"\n              className={classes.titleBar}\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n`;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 500,\n    height: 450\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\"\n  }\n}));\n\nconst useStyles3 = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    flexWrap: \"nowrap\",\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: \"translateZ(0)\"\n  },\n  title: {\n    color: theme.palette.primary.light\n  },\n  titleBar: {\n    background:\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n  }\n}));\n\nconst useStyles4 = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 1200,\n    height: 450,\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: \"translateZ(0)\"\n  },\n  titleBar: {\n    background:\n      \"linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, \" +\n      \"rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n  },\n  icon: {\n    color: \"white\"\n  }\n}));\n\nexport default function GridListExamplesPage() {\n  const classes = useStyles();\n  const classes3 = useStyles3();\n  const classes4 = useStyles4();\n\n  return (\n    <>\n      <Notice icon=\"flaticon-warning font-primary\">\n        <span>\n          Grid lists display a collection of images in an organized grid.\n        </span>{\" \"}\n        <span>\n          For more info please check the components's official{\" \"}\n          <a\n            target=\"_blank\"\n            className=\"font-weight-bold\"\n            rel=\"noopener noreferrer\"\n            href=\"https://material-ui.com/components/grid-list/\"\n          >\n            demos & documentation\n          </a>\n        </span>\n      </Notice>\n\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <KTCodeExample\n            jsCode={jsCode1}\n            beforeCodeTitle=\"Image-only grid list\"\n            codeBlockHeight=\"400px\"\n          >\n            <span>\n              A simple example of a scrollable image <code>GridList</code> .\n            </span>\n            <div className=\"separator separator-dashed my-7\"></div>\n            <div className={classes.root}>\n              <GridList cellHeight={160} className={classes.gridList} cols={3}>\n                {tileData.map(tile => (\n                  <GridListTile key={tile.img} cols={tile.cols || 1}>\n                    <img src={tile.img} alt={tile.title} />\n                  </GridListTile>\n                ))}\n              </GridList>\n            </div>\n          </KTCodeExample>\n        </div>\n        <div className=\"col-md-6\">\n          <KTCodeExample\n            jsCode={jsCode2}\n            beforeCodeTitle=\"Grid list with titlebars\"\n            codeBlockHeight=\"400px\"\n          >\n            <span>\n              This example demonstrates the use of the{\" \"}\n              <code>GridListTileBar</code> to add an overlay to each{\" \"}\n              <code>GridListTile</code>. The overlay can accommodate a{\" \"}\n              <code>title</code>, <code>subtitle</code> and secondary action -\n              in this example an <code>IconButton</code>.\n            </span>\n            <div className=\"separator separator-dashed my-7\"></div>\n            <div className={classes.root}>\n              <GridList cellHeight={180} className={classes.gridList}>\n                <GridListTile\n                  key=\"Subheader\"\n                  cols={2}\n                  style={{ height: \"auto\" }}\n                >\n                  <ListSubheader component=\"div\">December</ListSubheader>\n                </GridListTile>\n                {tileData.map(tile => (\n                  <GridListTile key={tile.img}>\n                    <img src={tile.img} alt={tile.title} />\n                    <GridListTileBar\n                      title={tile.title}\n                      subtitle={<span>by: {tile.author}</span>}\n                      actionIcon={\n                        <IconButton\n                          aria-label={`info about ${tile.title}`}\n                          className={classes.icon}\n                        >\n                          <i className=\"flaticon-information\"></i>\n                        </IconButton>\n                      }\n                    />\n                  </GridListTile>\n                ))}\n              </GridList>\n            </div>\n          </KTCodeExample>\n        </div>\n      </div>\n\n      <KTCodeExample\n        jsCode={jsCode3}\n        beforeCodeTitle=\"Single line Grid list\"\n        codeBlockHeight=\"400px\"\n      >\n        <span>\n          This example demonstrates a horizontal scrollable single-line grid\n          list of images. Horizontally scrolling grid lists are discouraged\n          because the scrolling interferes with typical reading patterns,\n          affecting comprehension. One notable exception is a\n          horizontally-scrolling, single-line grid list of images, such as a\n          gallery.\n        </span>\n        <div className=\"separator separator-dashed my-7\"></div>\n        <div className={classes3.root}>\n          <GridList className={classes3.gridList} cols={2.5}>\n            {tileData.map(tile => (\n              <GridListTile key={tile.img}>\n                <img src={tile.img} alt={tile.title} />\n                <GridListTileBar\n                  title={tile.title}\n                  classes={{\n                    root: classes3.titleBar,\n                    title: classes3.title\n                  }}\n                  actionIcon={\n                    <IconButton aria-label={`star ${tile.title}`}>\n                      <i className=\"flaticon-star\"></i>\n                    </IconButton>\n                  }\n                />\n              </GridListTile>\n            ))}\n          </GridList>\n        </div>\n      </KTCodeExample>\n      <KTCodeExample\n        jsCode={jsCode4}\n        beforeCodeTitle=\"Advanced Grid list\"\n        codeBlockHeight=\"400px\"\n      >\n        <span>\n          This example demonstrates \"featured\" tiles, using the{\" \"}\n          <code>rows</code> and <code>cols</code> props to adjust the size of\n          the tile, and the <code>padding</code> prop to adjust the spacing. The\n          tiles have a customized titlebar, positioned at the top and with a\n          custom gradient <code>titleBackground</code>. The secondary action{\" \"}\n          <code>IconButton</code> is positioned on the left.\n        </span>\n        <div className=\"separator separator-dashed my-7\"></div>\n        <div className={classes4.root}>\n          <GridList cellHeight={200} spacing={1} className={classes4.gridList}>\n            {tileData.map(tile => (\n              <GridListTile\n                key={tile.img}\n                cols={tile.featured ? 2 : 1}\n                rows={tile.featured ? 2 : 1}\n              >\n                <img src={tile.img} alt={tile.title} />\n                <GridListTileBar\n                  title={tile.title}\n                  titlePosition=\"top\"\n                  actionIcon={\n                    <IconButton\n                      aria-label={`star ${tile.title}`}\n                      className={classes4.icon}\n                    >\n                      <StarBorderIcon />\n                    </IconButton>\n                  }\n                  actionPosition=\"left\"\n                  className={classes4.titleBar}\n                />\n              </GridListTile>\n            ))}\n          </GridList>\n        </div>\n      </KTCodeExample>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}