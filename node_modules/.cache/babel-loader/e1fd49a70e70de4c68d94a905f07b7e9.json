{"ast":null,"code":"import _slicedToArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/GoogleMaterialExamples/labs/ToggleButtonExamplesPage.js\";\n\n/* eslint-disable no-restricted-imports */\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport FormatAlignLeftIcon from \"@material-ui/icons/FormatAlignLeft\";\nimport FormatAlignCenterIcon from \"@material-ui/icons/FormatAlignCenter\";\nimport FormatAlignRightIcon from \"@material-ui/icons/FormatAlignRight\";\nimport FormatAlignJustifyIcon from \"@material-ui/icons/FormatAlignJustify\";\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\";\nimport FormatItalicIcon from \"@material-ui/icons/FormatItalic\";\nimport FormatUnderlinedIcon from \"@material-ui/icons/FormatUnderlined\";\nimport FormatColorFillIcon from \"@material-ui/icons/FormatColorFill\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\"; // Example 1\n\nvar useStyles1 = makeStyles(function (theme) {\n  return {\n    toggleContainer: {\n      margin: theme.spacing(2, 0)\n    }\n  };\n});\nexport default function ToggleButtonExamplesPage() {\n  // Example 1\n  var _React$useState = React.useState(\"left\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      alignment1 = _React$useState2[0],\n      setAlignment1 = _React$useState2[1];\n\n  var _React$useState3 = React.useState(function () {\n    return [\"bold\"];\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      formats1 = _React$useState4[0],\n      setFormats1 = _React$useState4[1];\n\n  var handleFormat1 = function handleFormat1(event, newFormats) {\n    setFormats1(newFormats);\n  };\n\n  var handleAlignment1 = function handleAlignment1(event, newAlignment) {\n    setAlignment1(newAlignment);\n  };\n\n  var classes1 = useStyles1(); // Example 2\n\n  var _React$useState5 = React.useState(\"left\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      alignment2 = _React$useState6[0],\n      setAlignment2 = _React$useState6[1];\n\n  var handleChange2 = function handleChange2(event, newAlignment) {\n    setAlignment2(newAlignment);\n  };\n\n  var children2 = [/*#__PURE__*/React.createElement(ToggleButton, {\n    key: 1,\n    value: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignLeftIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    key: 2,\n    value: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignCenterIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    key: 3,\n    value: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignRightIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    key: 4,\n    value: \"justify\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignJustifyIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }))];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Toggle buttons can be used to group related options.\"), \" For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"demos & documentation\")), /*#__PURE__*/React.createElement(Notice, {\n    className: \"notice__paragraph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Toggle Buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"section-sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"To emphasize groups of related Toggle buttons, a group should share a common container.\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"section-sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"The \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"ToggleButtonGroup\"), \" will control the selected of its child buttons when given its own \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 46\n    }\n  }, \"value\"), \" prop.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes1.toggleContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: alignment1,\n    exclusive: true,\n    onChange: handleAlignment1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignLeftIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignCenterIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignRightIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"justify\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignJustifyIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }\n  })))), /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Exclusive Selection\"), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"Text justification toggle buttons present options for left, right, center, full, and justified text with only one item available for selection at a time. Selecting one option deselects any other.\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes1.toggleContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: formats1,\n    onChange: handleFormat1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatBoldIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatItalicIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"underlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatUnderlinedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButton, {\n    disabled: true,\n    value: \"color\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormatColorFillIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(ArrowDropDownIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 23\n    }\n  })))), /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, \"Multiple Selection\"), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Logically-grouped options, like Bold, Italic, and Underline, allow multiple options to be selected.\")))))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"Sizes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"section-sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Fancy larger or smaller buttons? Use the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 54\n    }\n  }, \"size\"), \" property.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    direction: \"column\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    size: \"small\",\n    value: alignment2,\n    exclusive: true,\n    onChange: handleChange2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, children2)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    size: \"medium\",\n    value: alignment2,\n    exclusive: true,\n    onChange: handleChange2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, children2)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    size: \"large\",\n    value: alignment2,\n    exclusive: true,\n    onChange: handleChange2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, children2)))))));\n}\nvar jsCode1 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\\nimport Typography from '@material-ui/core/Typography';\\nimport Grid from '@material-ui/core/Grid';\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\n\\nconst useStyles = makeStyles(theme => ({\\n  toggleContainer: {\\n    margin: theme.spacing(2, 0),\\n  },\\n}));\\n\\nexport default function ToggleButtons() {\\n  const [alignment, setAlignment] = React.useState('left');\\n  const [formats, setFormats] = React.useState(() => ['bold']);\\n\\n  const handleFormat = (event, newFormats) => {\\n    setFormats(newFormats);\\n  };\\n\\n  const handleAlignment = (event, newAlignment) => {\\n    setAlignment(newAlignment);\\n  };\\n\\n  const classes = useStyles();\\n\\n  return (\\n    <Grid container spacing={2}>\\n      <Grid item sm={12} md={6}>\\n        <div className={classes.toggleContainer}>\\n          <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment}>\\n            <ToggleButton value=\\\"left\\\">\\n              <FormatAlignLeftIcon />\\n            </ToggleButton>\\n            <ToggleButton value=\\\"center\\\">\\n              <FormatAlignCenterIcon />\\n            </ToggleButton>\\n            <ToggleButton value=\\\"right\\\">\\n              <FormatAlignRightIcon />\\n            </ToggleButton>\\n            <ToggleButton value=\\\"justify\\\" disabled>\\n              <FormatAlignJustifyIcon />\\n            </ToggleButton>\\n          </ToggleButtonGroup>\\n        </div>\\n        <Typography gutterBottom>Exclusive Selection</Typography>\\n        <Typography>\\n          Text justification toggle buttons present options for left, right, center, full, and\\n          justified text with only one item available for selection at a time. Selecting one option\\n          deselects any other.\\n        </Typography>\\n      </Grid>\\n      <Grid item sm={12} md={6}>\\n        <div className={classes.toggleContainer}>\\n          <ToggleButtonGroup value={formats} onChange={handleFormat}>\\n            <ToggleButton value=\\\"bold\\\">\\n              <FormatBoldIcon />\\n            </ToggleButton>\\n            <ToggleButton value=\\\"italic\\\">\\n              <FormatItalicIcon />\\n            </ToggleButton>\\n            <ToggleButton value=\\\"underlined\\\">\\n              <FormatUnderlinedIcon />\\n            </ToggleButton>\\n            <ToggleButton disabled value=\\\"color\\\">\\n              <FormatColorFillIcon />\\n              <ArrowDropDownIcon />\\n            </ToggleButton>\\n          </ToggleButtonGroup>\\n        </div>\\n        <Typography gutterBottom>Multiple Selection</Typography>\\n        <Typography>\\n          Logically-grouped options, like Bold, Italic, and Underline, allow multiple options to be\\n          selected.\\n        </Typography>\\n      </Grid>\\n    </Grid>\\n  );\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\\nimport Grid from '@material-ui/core/Grid';\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\n\\nexport default function ToggleButtonSizes() {\\n  const [alignment, setAlignment] = React.useState('left');\\n\\n  const handleChange = (event, newAlignment) => {\\n    setAlignment(newAlignment);\\n  };\\n\\n  const children = [\\n    <ToggleButton key={1} value=\\\"left\\\">\\n      <FormatAlignLeftIcon />\\n    </ToggleButton>,\\n    <ToggleButton key={2} value=\\\"center\\\">\\n      <FormatAlignCenterIcon />\\n    </ToggleButton>,\\n    <ToggleButton key={3} value=\\\"right\\\">\\n      <FormatAlignRightIcon />\\n    </ToggleButton>,\\n    <ToggleButton key={4} value=\\\"justify\\\" disabled>\\n      <FormatAlignJustifyIcon />\\n    </ToggleButton>,\\n  ];\\n\\n  return (\\n    <Grid container spacing={2} direction=\\\"column\\\" alignItems=\\\"center\\\">\\n      <Grid item>\\n        <ToggleButtonGroup size=\\\"small\\\" value={alignment} exclusive onChange={handleChange}>\\n          {children}\\n        </ToggleButtonGroup>\\n      </Grid>\\n      <Grid item>\\n        <ToggleButtonGroup size=\\\"medium\\\" value={alignment} exclusive onChange={handleChange}>\\n          {children}\\n        </ToggleButtonGroup>\\n      </Grid>\\n      <Grid item>\\n        <ToggleButtonGroup size=\\\"large\\\" value={alignment} exclusive onChange={handleChange}>\\n          {children}\\n        </ToggleButtonGroup>\\n      </Grid>\\n    </Grid>\\n  );\\n}\\n\";","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/GoogleMaterialExamples/labs/ToggleButtonExamplesPage.js"],"names":["React","makeStyles","Grid","Typography","ToggleButton","ToggleButtonGroup","FormatAlignLeftIcon","FormatAlignCenterIcon","FormatAlignRightIcon","FormatAlignJustifyIcon","FormatBoldIcon","FormatItalicIcon","FormatUnderlinedIcon","FormatColorFillIcon","ArrowDropDownIcon","Notice","KTCodeExample","useStyles1","theme","toggleContainer","margin","spacing","ToggleButtonExamplesPage","useState","alignment1","setAlignment1","formats1","setFormats1","handleFormat1","event","newFormats","handleAlignment1","newAlignment","classes1","alignment2","setAlignment2","handleChange2","children2","jsCode1","jsCode2"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-imports */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Grid, Typography} from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport FormatAlignLeftIcon from \"@material-ui/icons/FormatAlignLeft\";\nimport FormatAlignCenterIcon from \"@material-ui/icons/FormatAlignCenter\";\nimport FormatAlignRightIcon from \"@material-ui/icons/FormatAlignRight\";\nimport FormatAlignJustifyIcon from \"@material-ui/icons/FormatAlignJustify\";\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\";\nimport FormatItalicIcon from \"@material-ui/icons/FormatItalic\";\nimport FormatUnderlinedIcon from \"@material-ui/icons/FormatUnderlined\";\nimport FormatColorFillIcon from \"@material-ui/icons/FormatColorFill\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\n\n// Example 1\nconst useStyles1 = makeStyles(theme => ({\n  toggleContainer: {\n    margin: theme.spacing(2, 0)\n  }\n}));\n\nexport default function ToggleButtonExamplesPage() {\n  // Example 1\n  const [alignment1, setAlignment1] = React.useState(\"left\");\n  const [formats1, setFormats1] = React.useState(() => [\"bold\"]);\n\n  const handleFormat1 = (event, newFormats) => {\n    setFormats1(newFormats);\n  };\n\n  const handleAlignment1 = (event, newAlignment) => {\n    setAlignment1(newAlignment);\n  };\n\n  const classes1 = useStyles1();\n\n  // Example 2\n  const [alignment2, setAlignment2] = React.useState(\"left\");\n\n  const handleChange2 = (event, newAlignment) => {\n    setAlignment2(newAlignment);\n  };\n\n  const children2 = [\n    <ToggleButton key={1} value=\"left\">\n      <FormatAlignLeftIcon />\n    </ToggleButton>,\n    <ToggleButton key={2} value=\"center\">\n      <FormatAlignCenterIcon />\n    </ToggleButton>,\n    <ToggleButton key={3} value=\"right\">\n      <FormatAlignRightIcon />\n    </ToggleButton>,\n    <ToggleButton key={4} value=\"justify\" disabled>\n      <FormatAlignJustifyIcon />\n    </ToggleButton>\n  ];\n\n  return (\n    <>\n      <Notice icon=\"flaticon-warning font-primary\">\n        <span>Toggle buttons can be used to group related options.</span> For\n        more info please check the components's official{\" \"}\n        <a\n          target=\"_blank\"\n          className=\"font-weight-bold\"\n          rel=\"noopener noreferrer\"\n          href=\"\"\n        >\n          demos & documentation\n        </a>\n      </Notice>\n\n      <Notice className=\"notice__paragraph\"></Notice>\n\n      <KTCodeExample jsCode={jsCode1} beforeCodeTitle=\"Toggle Buttons\">\n        <div className=\"section\">\n          <span className=\"section-sub\">\n            To emphasize groups of related Toggle buttons, a group should share\n            a common container.\n          </span>\n          <p className=\"section-sub\">\n            The <code>ToggleButtonGroup</code> will control the selected of its\n            child buttons when given its own <code>value</code> prop.\n          </p>\n          <div className=\"separator separator-dashed my-7\"></div>\n          <div className=\"section-content\">\n            <Grid container spacing={2}>\n              <Grid item sm={12} md={6}>\n                <div className={classes1.toggleContainer}>\n                  <ToggleButtonGroup\n                    value={alignment1}\n                    exclusive\n                    onChange={handleAlignment1}\n                  >\n                    <ToggleButton value=\"left\">\n                      <FormatAlignLeftIcon />\n                    </ToggleButton>\n                    <ToggleButton value=\"center\">\n                      <FormatAlignCenterIcon />\n                    </ToggleButton>\n                    <ToggleButton value=\"right\">\n                      <FormatAlignRightIcon />\n                    </ToggleButton>\n                    <ToggleButton value=\"justify\" disabled>\n                      <FormatAlignJustifyIcon />\n                    </ToggleButton>\n                  </ToggleButtonGroup>\n                </div>\n                <Typography gutterBottom>Exclusive Selection</Typography>\n                <Typography>\n                  Text justification toggle buttons present options for left,\n                  right, center, full, and justified text with only one item\n                  available for selection at a time. Selecting one option\n                  deselects any other.\n                </Typography>\n              </Grid>\n              <Grid item sm={12} md={6}>\n                <div className={classes1.toggleContainer}>\n                  <ToggleButtonGroup value={formats1} onChange={handleFormat1}>\n                    <ToggleButton value=\"bold\">\n                      <FormatBoldIcon />\n                    </ToggleButton>\n                    <ToggleButton value=\"italic\">\n                      <FormatItalicIcon />\n                    </ToggleButton>\n                    <ToggleButton value=\"underlined\">\n                      <FormatUnderlinedIcon />\n                    </ToggleButton>\n                    <ToggleButton disabled value=\"color\">\n                      <FormatColorFillIcon />\n                      <ArrowDropDownIcon />\n                    </ToggleButton>\n                  </ToggleButtonGroup>\n                </div>\n                <Typography gutterBottom>Multiple Selection</Typography>\n                <Typography>\n                  Logically-grouped options, like Bold, Italic, and Underline,\n                  allow multiple options to be selected.\n                </Typography>\n              </Grid>\n            </Grid>\n          </div>\n        </div>\n      </KTCodeExample>\n\n      <KTCodeExample jsCode={jsCode2} beforeCodeTitle=\"Sizes\">\n        <div className=\"section\">\n          <span className=\"section-sub\">\n            Fancy larger or smaller buttons? Use the <code>size</code> property.\n          </span>\n          <div className=\"separator separator-dashed my-7\"></div>\n          <div className=\"section-content\">\n            <Grid container spacing={2} direction=\"column\" alignItems=\"center\">\n              <Grid item>\n                <ToggleButtonGroup\n                  size=\"small\"\n                  value={alignment2}\n                  exclusive\n                  onChange={handleChange2}\n                >\n                  {children2}\n                </ToggleButtonGroup>\n              </Grid>\n              <Grid item>\n                <ToggleButtonGroup\n                  size=\"medium\"\n                  value={alignment2}\n                  exclusive\n                  onChange={handleChange2}\n                >\n                  {children2}\n                </ToggleButtonGroup>\n              </Grid>\n              <Grid item>\n                <ToggleButtonGroup\n                  size=\"large\"\n                  value={alignment2}\n                  exclusive\n                  onChange={handleChange2}\n                >\n                  {children2}\n                </ToggleButtonGroup>\n              </Grid>\n            </Grid>\n          </div>\n        </div>\n      </KTCodeExample>\n    </>\n  );\n}\n\nconst jsCode1 = `\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nconst useStyles = makeStyles(theme => ({\n  toggleContainer: {\n    margin: theme.spacing(2, 0),\n  },\n}));\n\nexport default function ToggleButtons() {\n  const [alignment, setAlignment] = React.useState('left');\n  const [formats, setFormats] = React.useState(() => ['bold']);\n\n  const handleFormat = (event, newFormats) => {\n    setFormats(newFormats);\n  };\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment}>\n            <ToggleButton value=\"left\">\n              <FormatAlignLeftIcon />\n            </ToggleButton>\n            <ToggleButton value=\"center\">\n              <FormatAlignCenterIcon />\n            </ToggleButton>\n            <ToggleButton value=\"right\">\n              <FormatAlignRightIcon />\n            </ToggleButton>\n            <ToggleButton value=\"justify\" disabled>\n              <FormatAlignJustifyIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <Typography gutterBottom>Exclusive Selection</Typography>\n        <Typography>\n          Text justification toggle buttons present options for left, right, center, full, and\n          justified text with only one item available for selection at a time. Selecting one option\n          deselects any other.\n        </Typography>\n      </Grid>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup value={formats} onChange={handleFormat}>\n            <ToggleButton value=\"bold\">\n              <FormatBoldIcon />\n            </ToggleButton>\n            <ToggleButton value=\"italic\">\n              <FormatItalicIcon />\n            </ToggleButton>\n            <ToggleButton value=\"underlined\">\n              <FormatUnderlinedIcon />\n            </ToggleButton>\n            <ToggleButton disabled value=\"color\">\n              <FormatColorFillIcon />\n              <ArrowDropDownIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <Typography gutterBottom>Multiple Selection</Typography>\n        <Typography>\n          Logically-grouped options, like Bold, Italic, and Underline, allow multiple options to be\n          selected.\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n`;\nconst jsCode2 = `\nimport React from 'react';\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\nimport Grid from '@material-ui/core/Grid';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nexport default function ToggleButtonSizes() {\n  const [alignment, setAlignment] = React.useState('left');\n\n  const handleChange = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const children = [\n    <ToggleButton key={1} value=\"left\">\n      <FormatAlignLeftIcon />\n    </ToggleButton>,\n    <ToggleButton key={2} value=\"center\">\n      <FormatAlignCenterIcon />\n    </ToggleButton>,\n    <ToggleButton key={3} value=\"right\">\n      <FormatAlignRightIcon />\n    </ToggleButton>,\n    <ToggleButton key={4} value=\"justify\" disabled>\n      <FormatAlignJustifyIcon />\n    </ToggleButton>,\n  ];\n\n  return (\n    <Grid container spacing={2} direction=\"column\" alignItems=\"center\">\n      <Grid item>\n        <ToggleButtonGroup size=\"small\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n      <Grid item>\n        <ToggleButtonGroup size=\"medium\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n      <Grid item>\n        <ToggleButtonGroup size=\"large\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n    </Grid>\n  );\n}\n`;\n"]},"metadata":{},"sourceType":"module"}