{"ast":null,"code":"import _slicedToArray from \"/Users/zerrinekici/Desktop/adminlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/GoogleMaterialExamples/utils/PortalExamplesPage.js\";\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Typography, Portal } from \"@material-ui/core\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    alert: {\n      padding: theme.spacing(1),\n      margin: theme.spacing(1, 0),\n      border: \"1px solid\",\n      borderColor: theme.palette.text.primary\n    }\n  };\n});\nexport default function PortalExamplesPage() {\n  // Example 1\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      show = _React$useState2[0],\n      setShow = _React$useState2[1];\n\n  var container = React.useRef(null);\n  var classes = useStyles();\n\n  function handleClick() {\n    setShow(!show);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"The portal component renders its children into a new \\\"subtree\\\" outside of current component hierarchy.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/portal/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Simple Portal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"The children of the portal component will be appended to the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, \"container\"), \" specified.\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"The component is used internally by the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 51\n    }\n  }, \"Modal\"), \" and\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Popper\"), \" components. On the server, the content won't be rendered. You have to wait for the client side hydratation to see the children.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, show ? \"Unmount children\" : \"Mount children\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.alert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"It looks like I will render here.\"), show ? /*#__PURE__*/React.createElement(Portal, {\n    container: container.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, \"But I actually render here!\")) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.alert,\n    ref: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }))));\n}\nvar jsCode1 = \"\\nimport React from 'react';\\nimport Portal from '@material-ui/core/Portal';\\nimport Button from '@material-ui/core/Button';\\nimport Typography from '@material-ui/core/Typography';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles(theme => ({\\n  alert: {\\n    padding: theme.spacing(1),\\n    margin: theme.spacing(1, 0),\\n    border: '1px solid',\\n    borderColor: theme.palette.text.primary,\\n  },\\n}));\\n\\nexport default function SimplePortal() {\\n  const [show, setShow] = React.useState(false);\\n  const container = React.useRef(null);\\n  const classes = useStyles();\\n\\n  function handleClick() {\\n    setShow(!show);\\n  }\\n\\n  return (\\n    <div>\\n      <Button onClick={handleClick}>{show ? 'Unmount children' : 'Mount children'}</Button>\\n      <div className={classes.alert}>\\n        <Typography>It looks like I will render here.</Typography>\\n        {show ? (\\n          <Portal container={container.current}>\\n            <Typography>But I actually render here!</Typography>\\n          </Portal>\\n        ) : null}\\n      </div>\\n      <div className={classes.alert} ref={container} />\\n    </div>\\n  );\\n}\\n\";","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/GoogleMaterialExamples/utils/PortalExamplesPage.js"],"names":["React","makeStyles","Button","Typography","Portal","Notice","KTCodeExample","useStyles","theme","alert","padding","spacing","margin","border","borderColor","palette","text","primary","PortalExamplesPage","useState","show","setShow","container","useRef","classes","handleClick","jsCode1","current"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button, Typography, Portal} from \"@material-ui/core\";\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\n\nconst useStyles = makeStyles(theme => ({\n  alert: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1, 0),\n    border: \"1px solid\",\n    borderColor: theme.palette.text.primary\n  }\n}));\n\nexport default function PortalExamplesPage() {\n  // Example 1\n  const [show, setShow] = React.useState(false);\n  const container = React.useRef(null);\n  const classes = useStyles();\n\n  function handleClick() {\n    setShow(!show);\n  }\n\n  return (\n    <>\n      <Notice icon=\"flaticon-warning font-primary\">\n        <span>\n          The portal component renders its children into a new \"subtree\" outside\n          of current component hierarchy.\n        </span>{\" \"}\n        <span>\n          For more info please check the components's official{\" \"}\n          <a\n            target=\"_blank\"\n            className=\"font-weight-bold\"\n            rel=\"noopener noreferrer\"\n            href=\"https://material-ui.com/components/portal/\"\n          >\n            demos & documentation\n          </a>\n        </span>\n      </Notice>\n\n      <KTCodeExample jsCode={jsCode1} beforeCodeTitle=\"Simple Portal\">\n        <span className=\"pb-3\">\n          The children of the portal component will be appended to the{\" \"}\n          <code>container</code> specified.\n        </span>\n        <div>\n          The component is used internally by the <code>Modal</code> and{\" \"}\n          <code>Popper</code> components. On the server, the content won't be\n          rendered. You have to wait for the client side hydratation to see the\n          children.\n        </div>\n        <div className=\"separator separator-dashed my-7\"></div>\n        <div>\n          <Button onClick={handleClick}>\n            {show ? \"Unmount children\" : \"Mount children\"}\n          </Button>\n          <div className={classes.alert}>\n            <Typography>It looks like I will render here.</Typography>\n            {show ? (\n              <Portal container={container.current}>\n                <Typography>But I actually render here!</Typography>\n              </Portal>\n            ) : null}\n          </div>\n          <div className={classes.alert} ref={container} />\n        </div>\n      </KTCodeExample>\n    </>\n  );\n}\n\nconst jsCode1 = `\nimport React from 'react';\nimport Portal from '@material-ui/core/Portal';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  alert: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1, 0),\n    border: '1px solid',\n    borderColor: theme.palette.text.primary,\n  },\n}));\n\nexport default function SimplePortal() {\n  const [show, setShow] = React.useState(false);\n  const container = React.useRef(null);\n  const classes = useStyles();\n\n  function handleClick() {\n    setShow(!show);\n  }\n\n  return (\n    <div>\n      <Button onClick={handleClick}>{show ? 'Unmount children' : 'Mount children'}</Button>\n      <div className={classes.alert}>\n        <Typography>It looks like I will render here.</Typography>\n        {show ? (\n          <Portal container={container.current}>\n            <Typography>But I actually render here!</Typography>\n          </Portal>\n        ) : null}\n      </div>\n      <div className={classes.alert} ref={container} />\n    </div>\n  );\n}\n`;\n"]},"metadata":{},"sourceType":"module"}