{"ast":null,"code":"import * as requestFromServer from \"./remarksCrud\";\nimport { remarksSlice, callTypes } from \"./remarksSlice\";\nvar actions = remarksSlice.actions;\nexport var fetchRemarks = function fetchRemarks(queryParams, productId) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.list\n    }));\n\n    if (!productId) {\n      return dispatch(actions.remarksFetched({\n        totalCount: 0,\n        entities: null\n      }));\n    }\n\n    return requestFromServer.findRemarks(queryParams, productId).then(function (response) {\n      var _response$data = response.data,\n          totalCount = _response$data.totalCount,\n          entities = _response$data.entities;\n      dispatch(actions.remarksFetched({\n        totalCount: totalCount,\n        entities: entities\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find remarks\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.list\n      }));\n    });\n  };\n};\nexport var fetchRemark = function fetchRemark(id) {\n  return function (dispatch) {\n    if (!id) {\n      return dispatch(actions.remarkFetched({\n        remarkForEdit: undefined\n      }));\n    }\n\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.getRemarkById(id).then(function (response) {\n      var remark = response.data;\n      dispatch(actions.remarkFetched({\n        remarkForEdit: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteRemark = function deleteRemark(id) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteRemark(id).then(function (response) {\n      dispatch(actions.remarkDeleted({\n        id: id\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var createRemark = function createRemark(remarkForCreation) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.createRemark(remarkForCreation).then(function (response) {\n      var remark = response.data.remark;\n      dispatch(actions.remarkCreated({\n        remark: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't create remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateRemark = function updateRemark(remark) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateRemark(remark).then(function () {\n      dispatch(actions.remarkUpdated({\n        remark: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteRemarks = function deleteRemarks(ids) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteRemarks(ids).then(function () {\n      console.log(\"delete return\");\n      dispatch(actions.remarksDeleted({\n        ids: ids\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete remarks\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/_redux/remarks/remarksActions.js"],"names":["requestFromServer","remarksSlice","callTypes","actions","fetchRemarks","queryParams","productId","dispatch","startCall","callType","list","remarksFetched","totalCount","entities","findRemarks","then","response","data","catch","error","clientMessage","catchError","fetchRemark","id","remarkFetched","remarkForEdit","undefined","action","getRemarkById","remark","deleteRemark","remarkDeleted","createRemark","remarkForCreation","remarkCreated","updateRemark","remarkUpdated","deleteRemarks","ids","console","log","remarksDeleted"],"mappings":"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","sourcesContent":["import * as requestFromServer from \"./remarksCrud\";\nimport {remarksSlice, callTypes} from \"./remarksSlice\";\n\nconst {actions} = remarksSlice;\n\nexport const fetchRemarks = (queryParams, productId) => dispatch => {\n  dispatch(actions.startCall({ callType: callTypes.list }));\n  if (!productId) {\n    return dispatch(actions.remarksFetched({ totalCount: 0, entities: null }));\n  }\n\n  return requestFromServer\n    .findRemarks(queryParams, productId)\n    .then(response => {\n      const { totalCount, entities } = response.data;\n      dispatch(actions.remarksFetched({ totalCount, entities }));\n    })\n    .catch(error => {\n      error.clientMessage = \"Can't find remarks\";\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\n    });\n};\n\nexport const fetchRemark = id => dispatch => {\n  if (!id) {\n    return dispatch(actions.remarkFetched({ remarkForEdit: undefined }));\n  }\n\n  dispatch(actions.startCall({ callType: callTypes.action }));\n  return requestFromServer\n    .getRemarkById(id)\n    .then(response => {\n      const remark = response.data;\n      dispatch(actions.remarkFetched({ remarkForEdit: remark }));\n    })\n    .catch(error => {\n      error.clientMessage = \"Can't find remark\";\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\n    });\n};\n\nexport const deleteRemark = id => dispatch => {\n  dispatch(actions.startCall({ callType: callTypes.action }));\n  return requestFromServer\n    .deleteRemark(id)\n    .then(response => {\n      dispatch(actions.remarkDeleted({ id }));\n    })\n    .catch(error => {\n      error.clientMessage = \"Can't delete remark\";\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\n    });\n};\n\nexport const createRemark = remarkForCreation => dispatch => {\n  dispatch(actions.startCall({ callType: callTypes.action }));\n  return requestFromServer\n    .createRemark(remarkForCreation)\n    .then(response => {\n      const { remark } = response.data;\n      dispatch(actions.remarkCreated({ remark }));\n    })\n    .catch(error => {\n      error.clientMessage = \"Can't create remark\";\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\n    });\n};\n\nexport const updateRemark = remark => dispatch => {\n  dispatch(actions.startCall({ callType: callTypes.action }));\n  return requestFromServer\n    .updateRemark(remark)\n    .then(() => {\n      dispatch(actions.remarkUpdated({ remark }));\n    })\n    .catch(error => {\n      error.clientMessage = \"Can't update remark\";\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\n    });\n};\n\nexport const deleteRemarks = ids => dispatch => {\n  dispatch(actions.startCall({ callType: callTypes.action }));\n  return requestFromServer\n    .deleteRemarks(ids)\n    .then(() => {\n      console.log(\"delete return\");\n      dispatch(actions.remarksDeleted({ ids }));\n    })\n    .catch(error => {\n      error.clientMessage = \"Can't delete remarks\";\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}