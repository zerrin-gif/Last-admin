{"ast":null,"code":"var _jsxFileName = \"/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/pages/customers/customers-table/CustomersTable.js\";\n// React bootstrap table next =>\n// DOCS: https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/\n// STORYBOOK: https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html\nimport React, { useEffect, useMemo } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory, { PaginationProvider } from \"react-bootstrap-table2-paginator\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../_redux/customers/customersActions\";\nimport { getSelectRow, getHandlerTableChange, NoRecordsFoundMessage, PleaseWaitMessage, sortCaret, headerSortingClasses } from \"../../../../../../_metronic/_helpers\";\nimport * as uiHelpers from \"../CustomersUIHelpers\";\nimport * as columnFormatters from \"./column-formatters\";\nimport { Pagination } from \"../../../../../../_metronic/_partials/controls\";\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\nexport function CustomersTable() {\n  var _this = this;\n\n  // Customers UI Context\n  var customersUIContext = useCustomersUIContext();\n  var customersUIProps = useMemo(function () {\n    return {\n      ids: customersUIContext.ids,\n      setIds: customersUIContext.setIds,\n      queryParams: customersUIContext.queryParams,\n      setQueryParams: customersUIContext.setQueryParams,\n      openEditCustomerDialog: customersUIContext.openEditCustomerDialog,\n      openDeleteCustomerDialog: customersUIContext.openDeleteCustomerDialog\n    };\n  }, [customersUIContext]); // Getting curret state of customers list from store (Redux)\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      currentState: state.customers\n    };\n  }, shallowEqual),\n      currentState = _useSelector.currentState;\n\n  var totalCount = currentState.totalCount,\n      entities = currentState.entities,\n      listLoading = currentState.listLoading; // Customers Redux state\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    // clear selections list\n    customersUIProps.setIds([]); // server call by queryParams\n\n    dispatch(actions.fetchCustomers(customersUIProps.queryParams)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customersUIProps.queryParams, dispatch]); // Table columns\n\n  var columns = [{\n    dataField: \"id\",\n    text: \"ID\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"firstName\",\n    text: \"Firstname\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"lastName\",\n    text: \"Lastname\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"email\",\n    text: \"Email\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"gender\",\n    text: \"Gender\",\n    sort: false,\n    sortCaret: sortCaret\n  }, {\n    dataField: \"status\",\n    text: \"Status\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.StatusColumnFormatter,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"type\",\n    text: \"Type\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.TypeColumnFormatter\n  }, {\n    dataField: \"action\",\n    text: \"Actions\",\n    formatter: columnFormatters.ActionsColumnFormatter,\n    formatExtraData: {\n      openEditCustomerDialog: customersUIProps.openEditCustomerDialog,\n      openDeleteCustomerDialog: customersUIProps.openDeleteCustomerDialog\n    },\n    classes: \"text-right pr-0\",\n    headerClasses: \"text-right pr-3\",\n    style: {\n      minWidth: \"100px\"\n    }\n  }]; // Table pagination properties\n\n  var paginationOptions = {\n    custom: true,\n    totalSize: totalCount,\n    sizePerPageList: uiHelpers.sizePerPageList,\n    sizePerPage: customersUIProps.queryParams.pageSize,\n    page: customersUIProps.queryParams.pageNumber\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PaginationProvider, {\n    pagination: paginationFactory(paginationOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var paginationProps = _ref.paginationProps,\n        paginationTableProps = _ref.paginationTableProps;\n    return /*#__PURE__*/React.createElement(Pagination, {\n      isLoading: listLoading,\n      paginationProps: paginationProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({\n      wrapperClasses: \"table-responsive\",\n      bordered: false,\n      classes: \"table table-head-custom table-vertical-center overflow-hidden\",\n      bootstrap4: true,\n      remote: true,\n      keyField: \"id\",\n      data: entities === null ? [] : entities,\n      columns: columns,\n      defaultSorted: uiHelpers.defaultSorted,\n      onTableChange: getHandlerTableChange(customersUIProps.setQueryParams),\n      selectRow: getSelectRow({\n        entities: entities,\n        ids: customersUIProps.ids,\n        setIds: customersUIProps.setIds\n      })\n    }, paginationTableProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(PleaseWaitMessage, {\n      entities: entities,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NoRecordsFoundMessage, {\n      entities: entities,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    })));\n  }));\n}","map":{"version":3,"sources":["/Users/zerrinekici/Desktop/adminlast/src/app/modules/ECommerce/pages/customers/customers-table/CustomersTable.js"],"names":["React","useEffect","useMemo","BootstrapTable","paginationFactory","PaginationProvider","shallowEqual","useDispatch","useSelector","actions","getSelectRow","getHandlerTableChange","NoRecordsFoundMessage","PleaseWaitMessage","sortCaret","headerSortingClasses","uiHelpers","columnFormatters","Pagination","useCustomersUIContext","CustomersTable","customersUIContext","customersUIProps","ids","setIds","queryParams","setQueryParams","openEditCustomerDialog","openDeleteCustomerDialog","state","currentState","customers","totalCount","entities","listLoading","dispatch","fetchCustomers","columns","dataField","text","sort","formatter","StatusColumnFormatter","TypeColumnFormatter","ActionsColumnFormatter","formatExtraData","classes","headerClasses","style","minWidth","paginationOptions","custom","totalSize","sizePerPageList","sizePerPage","pageSize","page","pageNumber","paginationProps","paginationTableProps","defaultSorted"],"mappings":"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","sourcesContent":["// React bootstrap table next =>\n// DOCS: https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/\n// STORYBOOK: https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html\nimport React, { useEffect, useMemo } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory, {\n  PaginationProvider,\n} from \"react-bootstrap-table2-paginator\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../_redux/customers/customersActions\";\nimport {\n  getSelectRow,\n  getHandlerTableChange,\n  NoRecordsFoundMessage,\n  PleaseWaitMessage,\n  sortCaret,\n  headerSortingClasses,\n} from \"../../../../../../_metronic/_helpers\";\nimport * as uiHelpers from \"../CustomersUIHelpers\";\nimport * as columnFormatters from \"./column-formatters\";\nimport { Pagination } from \"../../../../../../_metronic/_partials/controls\";\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\n\nexport function CustomersTable() {\n  // Customers UI Context\n  const customersUIContext = useCustomersUIContext();\n  const customersUIProps = useMemo(() => {\n    return {\n      ids: customersUIContext.ids,\n      setIds: customersUIContext.setIds,\n      queryParams: customersUIContext.queryParams,\n      setQueryParams: customersUIContext.setQueryParams,\n      openEditCustomerDialog: customersUIContext.openEditCustomerDialog,\n      openDeleteCustomerDialog: customersUIContext.openDeleteCustomerDialog,\n    };\n  }, [customersUIContext]);\n\n  // Getting curret state of customers list from store (Redux)\n  const { currentState } = useSelector(\n    (state) => ({ currentState: state.customers }),\n    shallowEqual\n  );\n  const { totalCount, entities, listLoading } = currentState;\n\n  // Customers Redux state\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // clear selections list\n    customersUIProps.setIds([]);\n    // server call by queryParams\n    dispatch(actions.fetchCustomers(customersUIProps.queryParams));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customersUIProps.queryParams, dispatch]);\n  // Table columns\n  const columns = [\n    {\n      dataField: \"id\",\n      text: \"ID\",\n      sort: true,\n      sortCaret: sortCaret,\n      headerSortingClasses,\n    },\n    {\n      dataField: \"firstName\",\n      text: \"Firstname\",\n      sort: true,\n      sortCaret: sortCaret,\n      headerSortingClasses,\n    },\n    {\n      dataField: \"lastName\",\n      text: \"Lastname\",\n      sort: true,\n      sortCaret: sortCaret,\n      headerSortingClasses,\n    },\n    {\n      dataField: \"email\",\n      text: \"Email\",\n      sort: true,\n      sortCaret: sortCaret,\n      headerSortingClasses,\n    },\n    {\n      dataField: \"gender\",\n      text: \"Gender\",\n      sort: false,\n      sortCaret: sortCaret,\n    },\n    {\n      dataField: \"status\",\n      text: \"Status\",\n      sort: true,\n      sortCaret: sortCaret,\n      formatter: columnFormatters.StatusColumnFormatter,\n      headerSortingClasses,\n    },\n    {\n      dataField: \"type\",\n      text: \"Type\",\n      sort: true,\n      sortCaret: sortCaret,\n      formatter: columnFormatters.TypeColumnFormatter,\n    },\n    {\n      dataField: \"action\",\n      text: \"Actions\",\n      formatter: columnFormatters.ActionsColumnFormatter,\n      formatExtraData: {\n        openEditCustomerDialog: customersUIProps.openEditCustomerDialog,\n        openDeleteCustomerDialog: customersUIProps.openDeleteCustomerDialog,\n      },\n      classes: \"text-right pr-0\",\n      headerClasses: \"text-right pr-3\",\n      style: {\n        minWidth: \"100px\",\n      },\n    },\n  ];\n  // Table pagination properties\n  const paginationOptions = {\n    custom: true,\n    totalSize: totalCount,\n    sizePerPageList: uiHelpers.sizePerPageList,\n    sizePerPage: customersUIProps.queryParams.pageSize,\n    page: customersUIProps.queryParams.pageNumber,\n  };\n  return (\n    <>\n      <PaginationProvider pagination={paginationFactory(paginationOptions)}>\n        {({ paginationProps, paginationTableProps }) => {\n          return (\n            <Pagination\n              isLoading={listLoading}\n              paginationProps={paginationProps}\n            >\n              <BootstrapTable\n                wrapperClasses=\"table-responsive\"\n                bordered={false}\n                classes=\"table table-head-custom table-vertical-center overflow-hidden\"\n                bootstrap4\n                remote\n                keyField=\"id\"\n                data={entities === null ? [] : entities}\n                columns={columns}\n                defaultSorted={uiHelpers.defaultSorted}\n                onTableChange={getHandlerTableChange(\n                  customersUIProps.setQueryParams\n                )}\n                selectRow={getSelectRow({\n                  entities,\n                  ids: customersUIProps.ids,\n                  setIds: customersUIProps.setIds,\n                })}\n                {...paginationTableProps}\n              >\n                <PleaseWaitMessage entities={entities} />\n                <NoRecordsFoundMessage entities={entities} />\n              </BootstrapTable>\n            </Pagination>\n          );\n        }}\n      </PaginationProvider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}