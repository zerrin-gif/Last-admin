{"ast":null,"code":"/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */\n(function (w) {\n  \"use strict\";\n  /* exported loadCSS */\n\n  var loadCSS = function loadCSS(href, before, media, attributes) {\n    // Arguments explained:\n    // `href` [REQUIRED] is the URL for your CSS file.\n    // `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n    // By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n    // `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n    // `attributes` [OPTIONAL] is the Object of attribute name/attribute value pairs to set on the stylesheet's DOM Element.\n    var doc = w.document;\n    var ss = doc.createElement(\"link\");\n    var ref;\n\n    if (before) {\n      ref = before;\n    } else {\n      var refs = (doc.body || doc.getElementsByTagName(\"head\")[0]).childNodes;\n      ref = refs[refs.length - 1];\n    }\n\n    var sheets = doc.styleSheets; // Set any of the provided attributes to the stylesheet DOM Element.\n\n    if (attributes) {\n      for (var attributeName in attributes) {\n        if (attributes.hasOwnProperty(attributeName)) {\n          ss.setAttribute(attributeName, attributes[attributeName]);\n        }\n      }\n    }\n\n    ss.rel = \"stylesheet\";\n    ss.href = href; // temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\n    ss.media = \"only x\"; // wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\n    function ready(cb) {\n      if (doc.body) {\n        return cb();\n      }\n\n      setTimeout(function () {\n        ready(cb);\n      });\n    } // Inject link\n    // Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n    // Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\n\n    ready(function () {\n      ref.parentNode.insertBefore(ss, before ? ref : ref.nextSibling);\n    }); // A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\n    var onloadcssdefined = function onloadcssdefined(cb) {\n      var resolvedHref = ss.href;\n      var i = sheets.length;\n\n      while (i--) {\n        if (sheets[i].href === resolvedHref) {\n          return cb();\n        }\n      }\n\n      setTimeout(function () {\n        onloadcssdefined(cb);\n      });\n    };\n\n    function loadCB() {\n      if (ss.addEventListener) {\n        ss.removeEventListener(\"load\", loadCB);\n      }\n\n      ss.media = media || \"all\";\n    } // once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\n\n    if (ss.addEventListener) {\n      ss.addEventListener(\"load\", loadCB);\n    }\n\n    ss.onloadcssdefined = onloadcssdefined;\n    onloadcssdefined(loadCB);\n    return ss;\n  }; // commonjs\n\n\n  if (typeof exports !== \"undefined\") {\n    exports.loadCSS = loadCSS;\n  } else {\n    w.loadCSS = loadCSS;\n  }\n})(typeof global !== \"undefined\" ? global : this);","map":null,"metadata":{},"sourceType":"script"}