import { toObject, getOption, unpackData, getCanonicalLocales, createResolveLocale, supportedLocales, isMissingLocaleDataError, setInternalSlot, getInternalSlot, } from '@formatjs/intl-utils';
function validateInstance(instance, method) {
    if (!(instance instanceof PluralRules)) {
        throw new TypeError(`Method Intl.PluralRules.prototype.${method} called on incompatible receiver ${String(instance)}`);
    }
}
/**
 * https://tc39.es/ecma402/#sec-defaultnumberoption
 * @param val
 * @param min
 * @param max
 * @param fallback
 */
function defaultNumberOption(val, min, max, fallback) {
    if (val !== undefined) {
        val = Number(val);
        if (isNaN(val) || val < min || val > max) {
            throw new RangeError(`${val} is outside of range [${min}, ${max}]`);
        }
        return Math.floor(val);
    }
    return fallback;
}
/**
 * https://tc39.es/ecma402/#sec-getnumberoption
 * @param options
 * @param property
 * @param min
 * @param max
 * @param fallback
 */
function getNumberOption(options, property, min, max, fallback) {
    const val = options[property];
    return defaultNumberOption(val, min, max, fallback);
}
/**
 * https://tc39.es/ecma402/#sec-setnfdigitoptions
 * https://tc39.es/proposal-unified-intl-numberformat/section11/numberformat_diff_out.html#sec-setnfdigitoptions
 * @param pl
 * @param opts
 * @param mnfdDefault
 * @param mxfdDefault
 */
function setNumberFormatDigitOptions(internalSlotMap, pl, opts, mnfdDefault, mxfdDefault) {
    const mnid = getNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);
    let mnfd = opts.minimumFractionDigits;
    let mxfd = opts.maximumFractionDigits;
    let mnsd = opts.minimumSignificantDigits;
    let mxsd = opts.maximumSignificantDigits;
    setInternalSlot(internalSlotMap, pl, 'minimumIntegerDigits', mnid);
    setInternalSlot(internalSlotMap, pl, 'minimumFractionDigits', mnfd);
    setInternalSlot(internalSlotMap, pl, 'maximumFractionDigits', mxfd);
    if (mnsd !== undefined || mxsd !== undefined) {
        setInternalSlot(internalSlotMap, pl, 'roundingType', 'significantDigits');
        mnsd = defaultNumberOption(mnsd, 1, 21, 1);
        mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);
        setInternalSlot(internalSlotMap, pl, 'minimumSignificantDigits', mnsd);
        setInternalSlot(internalSlotMap, pl, 'maximumSignificantDigits', mxsd);
    }
    else if (mnfd !== undefined || mxfd !== undefined) {
        setInternalSlot(internalSlotMap, pl, 'roundingType', 'fractionDigits');
        mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);
        const mxfdActualDefault = Math.max(mnfd, mxfdDefault);
        mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);
        setInternalSlot(internalSlotMap, pl, 'minimumFractionDigits', mnfd);
        setInternalSlot(internalSlotMap, pl, 'maximumFractionDigits', mxfd);
    }
    else if (getInternalSlot(internalSlotMap, pl, 'notation') === 'compact') {
        setInternalSlot(internalSlotMap, pl, 'roundingType', 'compactRounding');
    }
    else {
        setInternalSlot(internalSlotMap, pl, 'roundingType', 'fractionDigits');
        setInternalSlot(internalSlotMap, pl, 'minimumFractionDigits', mnfdDefault);
        setInternalSlot(internalSlotMap, pl, 'maximumFractionDigits', mxfdDefault);
    }
}
/**
 * https://tc39.es/ecma402/#sec-torawprecision
 * @param x
 * @param minPrecision
 * @param maxPrecision
 */
function toRawPrecision(x, minPrecision, maxPrecision) {
    let m = x.toPrecision(maxPrecision);
    if (~m.indexOf('.') && maxPrecision > minPrecision) {
        let cut = maxPrecision - minPrecision;
        while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, m.length - 1);
            cut--;
        }
        if (m[m.length - 1] === '.') {
            return m.slice(0, m.length - 1);
        }
    }
    return m;
}
/**
 * https://tc39.es/ecma402/#sec-torawfixed
 * @param x
 * @param minInteger
 * @param minFraction
 * @param maxFraction
 */
function toRawFixed(x, minInteger, minFraction, maxFraction) {
    let cut = maxFraction - minFraction;
    let m = x.toFixed(maxFraction);
    while (cut > 0 && m[m.length - 1] === '0') {
        m = m.slice(0, m.length - 1);
        cut--;
    }
    if (m[m.length - 1] === '.') {
        m = m.slice(0, m.length - 1);
    }
    const int = m.split('.')[0].length;
    if (int < minInteger) {
        let z = '';
        for (; z.length < minInteger - int; z += '0')
            ;
        m = z + m;
    }
    return m;
}
function formatNumericToString(internalSlotMap, pl, x) {
    const minimumSignificantDigits = getInternalSlot(internalSlotMap, pl, 'minimumSignificantDigits');
    const maximumSignificantDigits = getInternalSlot(internalSlotMap, pl, 'maximumSignificantDigits');
    if (minimumSignificantDigits !== undefined &&
        maximumSignificantDigits !== undefined) {
        return toRawPrecision(x, minimumSignificantDigits, maximumSignificantDigits);
    }
    return toRawFixed(x, getInternalSlot(internalSlotMap, pl, 'minimumIntegerDigits'), getInternalSlot(internalSlotMap, pl, 'minimumFractionDigits'), getInternalSlot(internalSlotMap, pl, 'maximumFractionDigits'));
}
export class PluralRules {
    constructor(locales, options) {
        // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js
        // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
        const newTarget = this && this instanceof PluralRules ? this.constructor : void 0;
        if (!newTarget) {
            throw new TypeError("Intl.PluralRules must be called with 'new'");
        }
        const requestedLocales = getCanonicalLocales(locales);
        const opt = Object.create(null);
        const opts = options === undefined ? Object.create(null) : toObject(options);
        setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'initializedPluralRules', true);
        const matcher = getOption(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
        opt.localeMatcher = matcher;
        // test262/test/intl402/PluralRules/prototype/select/tainting.js
        // TODO: This is kinda cheating, but unless we rely on WeakMap to
        // hide the internal slots it's hard to be completely safe from tainting
        setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type', getOption(opts, 'type', 'string', ['cardinal', 'ordinal'], 'cardinal'));
        setNumberFormatDigitOptions(PluralRules.__INTERNAL_SLOT_MAP__, this, opts, 0, 3);
        const r = createResolveLocale(PluralRules.getDefaultLocale)(PluralRules.availableLocales, requestedLocales, opt, PluralRules.relevantExtensionKeys, PluralRules.localeData);
        setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale', r.locale);
    }
    resolvedOptions() {
        validateInstance(this, 'resolvedOptions');
        const opts = Object.create(Object.prototype);
        opts.locale = getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale');
        opts.type = getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type');
        [
            'minimumIntegerDigits',
            'minimumFractionDigits',
            'maximumFractionDigits',
            'minimumSignificantDigits',
            'maximumSignificantDigits',
        ].forEach(field => {
            const val = getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, field);
            if (val !== undefined) {
                opts[field] = val;
            }
        });
        opts.pluralCategories = [
            ...PluralRules.localeData[opts.locale].categories[opts.type],
        ];
        return opts;
    }
    select(val) {
        validateInstance(this, 'select');
        const locale = getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale');
        const type = getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type');
        return PluralRules.localeData[locale].fn(formatNumericToString(PluralRules.__INTERNAL_SLOT_MAP__, this, Math.abs(Number(val))), type == 'ordinal');
    }
    toString() {
        return '[object Intl.PluralRules]';
    }
    static supportedLocalesOf(locales, options) {
        return supportedLocales(PluralRules.availableLocales, getCanonicalLocales(locales), options);
    }
    static __addLocaleData(...data) {
        for (const datum of data) {
            const availableLocales = Object.keys([
                ...datum.availableLocales,
                ...Object.keys(datum.aliases),
                ...Object.keys(datum.parentLocales),
            ].reduce((all, k) => {
                all[k] = true;
                return all;
            }, {}));
            availableLocales.forEach(locale => {
                try {
                    PluralRules.localeData[locale] = unpackData(locale, datum);
                }
                catch (e) {
                    if (isMissingLocaleDataError(e)) {
                        // If we just don't have data for certain locale, that's ok
                        return;
                    }
                    throw e;
                }
            });
        }
        PluralRules.availableLocales = Object.keys(PluralRules.localeData);
        if (!PluralRules.__defaultLocale) {
            PluralRules.__defaultLocale = PluralRules.availableLocales[0];
        }
    }
    static getDefaultLocale() {
        return PluralRules.__defaultLocale;
    }
}
PluralRules.localeData = {};
PluralRules.availableLocales = [];
PluralRules.__defaultLocale = 'en';
PluralRules.relevantExtensionKeys = [];
PluralRules.polyfilled = true;
PluralRules.__INTERNAL_SLOT_MAP__ = new WeakMap();
try {
    // https://github.com/tc39/test262/blob/master/test/intl402/PluralRules/length.js
    Object.defineProperty(PluralRules, 'length', {
        value: 0,
        writable: false,
        enumerable: false,
        configurable: true,
    });
    // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js
    Object.defineProperty(PluralRules.prototype.constructor, 'length', {
        value: 0,
        writable: false,
        enumerable: false,
        configurable: true,
    });
    // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js
    Object.defineProperty(PluralRules.supportedLocalesOf, 'length', {
        value: 1,
        writable: false,
        enumerable: false,
        configurable: true,
    });
}
catch (ex) {
    // Meta fixes for test262
}
